/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LibraryLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/bibleBooks.ts
var bibleBooksDE = [
  {
    id: 1,
    aliases: ["1mo", "1.mo", "1mose", "1.mose"],
    longName: "1. Mose",
    shortName: "1Mo"
  },
  {
    id: 2,
    aliases: ["2mo", "2.mo", "2mose", "2.mose"],
    longName: "2. Mose",
    shortName: "2Mo"
  },
  {
    id: 3,
    aliases: ["3mo", "3.mo", "3mose", "3.mose"],
    longName: "3. Mose",
    shortName: "3Mo"
  },
  {
    id: 4,
    aliases: ["4mo", "4.mo", "4mose", "4.mose"],
    longName: "4. Mose",
    shortName: "4Mo"
  },
  {
    id: 5,
    aliases: ["5mo", "5.mo", "5mose", "5.mose"],
    longName: "5. Mose",
    shortName: "5Mo"
  },
  {
    id: 6,
    aliases: ["jos", "josua"],
    longName: "Josua",
    shortName: "Jos"
  },
  {
    id: 7,
    aliases: ["ri", "richt", "richter"],
    longName: "Richter",
    shortName: "Ri"
  },
  {
    id: 8,
    aliases: ["ru", "rut", "ruth"],
    longName: "Ruth",
    shortName: "Ru"
  },
  {
    id: 9,
    aliases: ["1sam", "1.sam", "1samuel", "1.samuel"],
    longName: "1. Samuel",
    shortName: "1Sam"
  },
  {
    id: 10,
    aliases: ["2sam", "2.sam", "2samuel", "2.samuel"],
    longName: "2. Samuel",
    shortName: "2Sam"
  },
  {
    id: 11,
    aliases: ["1k\xF6", "1.k\xF6", "1k\xF6n", "1.k\xF6n", "1k\xF6nige", "1.k\xF6nige"],
    longName: "1. K\xF6nige",
    shortName: "1K\xF6"
  },
  {
    id: 12,
    aliases: ["2k\xF6", "2.k\xF6", "2k\xF6n", "2.k\xF6n", "2k\xF6nige", "2.k\xF6nige"],
    longName: "2. K\xF6nige",
    shortName: "2K\xF6"
  },
  {
    id: 13,
    aliases: ["1chr", "1.chr", "1chron", "1.chron", "1chronik", "1.chronik", "1chronika", "1.chronika"],
    longName: "1. Chronika",
    shortName: "1Chr"
  },
  {
    id: 14,
    aliases: ["2chr", "2.chr", "2chron", "2.chron", "2chronik", "2.chronik", "2chronika", "2.chronika"],
    longName: "2. Chronika",
    shortName: "2Chr"
  },
  {
    id: 15,
    aliases: ["esr", "esra"],
    longName: "Esra",
    shortName: "Esr"
  },
  {
    id: 16,
    aliases: ["neh", "nehem", "nehemia"],
    longName: "Nehemia",
    shortName: "Neh"
  },
  {
    id: 17,
    aliases: ["est", "esth", "ester", "esther"],
    longName: "Esther",
    shortName: "Esth"
  },
  {
    id: 18,
    aliases: ["hi", "hiob"],
    longName: "Hiob",
    shortName: "Hi"
  },
  {
    id: 19,
    aliases: ["ps", "psa", "psalm", "psalmen"],
    longName: "Psalm",
    shortName: "Ps"
  },
  {
    id: 20,
    aliases: ["spr", "spr\xFC", "sprue", "spr\xFCche"],
    longName: "Spr\xFCche",
    shortName: "Spr"
  },
  {
    id: 21,
    aliases: ["pred", "prediger"],
    longName: "Prediger",
    shortName: "Pred"
  },
  {
    id: 22,
    aliases: ["hoh", "hl", "hoheslied", "hohes lied"],
    longName: "Hohes Lied",
    shortName: "Hoh"
  },
  {
    id: 23,
    aliases: ["jes", "jesaja"],
    longName: "Jesaja",
    shortName: "Jes"
  },
  {
    id: 24,
    aliases: ["jer", "jeremia"],
    longName: "Jeremia",
    shortName: "Jer"
  },
  {
    id: 25,
    aliases: ["klag", "klg", "klgl", "klagelieder"],
    longName: "Klagelieder",
    shortName: "Klg"
  },
  {
    id: 26,
    aliases: ["hes", "hesekiel", "ez", "ezechiel"],
    longName: "Hesekiel",
    shortName: "Hes"
  },
  {
    id: 27,
    aliases: ["dan", "daniel"],
    longName: "Daniel",
    shortName: "Dan"
  },
  {
    id: 28,
    aliases: ["hos", "hosea"],
    longName: "Hosea",
    shortName: "Hos"
  },
  {
    id: 29,
    aliases: ["joe", "joel"],
    longName: "Joel",
    shortName: "Joel"
  },
  {
    id: 30,
    aliases: ["am", "amos"],
    longName: "Amos",
    shortName: "Am"
  },
  {
    id: 31,
    aliases: ["ob", "obd", "obadja"],
    longName: "Obadja",
    shortName: "Ob"
  },
  {
    id: 32,
    aliases: ["jon", "jona"],
    longName: "Jona",
    shortName: "Jon"
  },
  {
    id: 33,
    aliases: ["mi", "micha"],
    longName: "Micha",
    shortName: "Mi"
  },
  {
    id: 34,
    aliases: ["nah", "nahum"],
    longName: "Nahum",
    shortName: "Nah"
  },
  {
    id: 35,
    aliases: ["hab", "habakuk"],
    longName: "Habakuk",
    shortName: "Hab"
  },
  {
    id: 36,
    aliases: ["zeph", "zefanja", "zephanja"],
    longName: "Zephanja",
    shortName: "Zeph"
  },
  {
    id: 37,
    aliases: ["hag", "haggai"],
    longName: "Haggai",
    shortName: "Hag"
  },
  {
    id: 38,
    aliases: ["sach", "sacharja"],
    longName: "Sacharja",
    shortName: "Sach"
  },
  {
    id: 39,
    aliases: ["mal", "maleachi"],
    longName: "Maleachi",
    shortName: "Mal"
  },
  {
    id: 40,
    aliases: ["mt", "mat", "matt", "matth", "matth\xE4us"],
    longName: "Matth\xE4us",
    shortName: "Mat"
  },
  {
    id: 41,
    aliases: ["mar", "markus"],
    longName: "Markus",
    shortName: "Mar"
  },
  {
    id: 42,
    aliases: ["lk", "luk", "lukas"],
    longName: "Lukas",
    shortName: "Luk"
  },
  {
    id: 43,
    aliases: ["joh", "johannes"],
    longName: "Johannes",
    shortName: "Joh"
  },
  {
    id: 44,
    aliases: ["apg", "apostelgeschichte"],
    longName: "Apostelgeschichte",
    shortName: "Apg"
  },
  {
    id: 45,
    aliases: ["r\xF6m", "r\xF6mer"],
    longName: "R\xF6mer",
    shortName: "R\xF6m"
  },
  {
    id: 46,
    aliases: ["1kor", "1.kor", "1korinther", "1.korinther"],
    longName: "1. Korinther",
    shortName: "1Kor"
  },
  {
    id: 47,
    aliases: ["2kor", "2.kor", "2korinther", "2.korinther"],
    longName: "2. Korinther",
    shortName: "2Kor"
  },
  {
    id: 48,
    aliases: ["gal", "galater"],
    longName: "Galater",
    shortName: "Gal"
  },
  {
    id: 49,
    aliases: ["eph", "epheser"],
    longName: "Epheser",
    shortName: "Eph"
  },
  {
    id: 50,
    aliases: ["phil", "philipper"],
    longName: "Philipper",
    shortName: "Phil"
  },
  {
    id: 51,
    aliases: ["kol", "kolosser"],
    longName: "Kolosser",
    shortName: "Kol"
  },
  {
    id: 52,
    aliases: ["1th", "1.th", "1thes", "1.thes", "1thessalonicher", "1.thessalonicher"],
    longName: "1. Thessalonicher",
    shortName: "1Th"
  },
  {
    id: 53,
    aliases: ["2th", "2.th", "2thes", "2.thes", "2thessalonicher", "2.thessalonicher"],
    longName: "2. Thessalonicher",
    shortName: "2Th"
  },
  {
    id: 54,
    aliases: ["1tim", "1.tim", "1timotheus", "1.timotheus"],
    longName: "1. Timotheus",
    shortName: "1Tim"
  },
  {
    id: 55,
    aliases: ["2tim", "2.tim", "2timotheus", "2.timotheus"],
    longName: "2. Timotheus",
    shortName: "2Tim"
  },
  {
    id: 56,
    aliases: ["tit", "titus"],
    longName: "Titus",
    shortName: "Tit"
  },
  {
    id: 57,
    aliases: ["phm", "phlm", "philemon"],
    longName: "Philemon",
    shortName: "Phm"
  },
  {
    id: 58,
    aliases: ["hebr", "heb", "hebr\xE4er"],
    longName: "Hebr\xE4er",
    shortName: "Hebr"
  },
  {
    id: 59,
    aliases: ["jak", "jakobus"],
    longName: "Jakobus",
    shortName: "Jak"
  },
  {
    id: 60,
    aliases: ["1pe", "1.pe", "1pet", "1.pet", "1petrus", "1.petrus"],
    longName: "1. Petrus",
    shortName: "1Pe"
  },
  {
    id: 61,
    aliases: ["2pe", "2.pe", "2pet", "2.pet", "2petrus", "2.petrus"],
    longName: "2. Petrus",
    shortName: "2Pe"
  },
  {
    id: 62,
    aliases: ["1joh", "1.joh", "1johannes", "1.johannes"],
    longName: "1. Johannes",
    shortName: "1Joh"
  },
  {
    id: 63,
    aliases: ["2joh", "2.joh", "2johannes", "2.johannes"],
    longName: "2. Johannes",
    shortName: "2Joh"
  },
  {
    id: 64,
    aliases: ["3joh", "3.joh", "3johannes", "3.johannes"],
    longName: "3. Johannes",
    shortName: "3Joh"
  },
  {
    id: 65,
    aliases: ["jud", "judas"],
    longName: "Judas",
    shortName: "Jud"
  },
  {
    id: 66,
    aliases: ["off", "offb", "offenbarung", "offenb"],
    longName: "Offenbarung",
    shortName: "Off"
  }
];

// main.ts
var DEFAULT_SETTINGS = {
  useShortNames: false
};
var BibleReferenceSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const match = subString.match(
      /(?:^|\s)(?:[-*+]\s+)?\/b\s+([a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?)?$/i
    );
    if (!match)
      return null;
    return {
      start: {
        ch: match.index + match[0].indexOf("/"),
        // Adjust start position to the actual command
        line: cursor.line
      },
      end: cursor,
      query: match[1] || ""
    };
  }
  getSuggestions(context) {
    const query = context.query;
    if (query.match(/^[a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?$/i)) {
      return [
        {
          text: query,
          command: "link",
          description: "Create JW Library link"
        },
        {
          text: query,
          command: "open",
          description: "Create JW Library link and open"
        }
      ];
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    el.setText(`${suggestion.description}`);
  }
  selectSuggestion(suggestion) {
    if (!this.context)
      return;
    const { context } = this;
    const editor = context.editor;
    const convertedLink = this.plugin.convertBibleTextToMarkdownLink(suggestion.text);
    editor.replaceRange(convertedLink, context.start, context.end);
    if (suggestion.command === "open") {
      const url = this.plugin.convertBibleTextToLink(suggestion.text);
      window.open(url);
    }
  }
};
var LibraryLinkerPlugin = class extends import_obsidian.Plugin {
  convertBibleReference(url) {
    url = url.replace("jwpub://", "jwlibrary://");
    const parts = url.split("/");
    const bibleRef = parts[parts.length - 1];
    const [startBookChapterVerse, endBookChapterVerse] = bibleRef.split("-");
    const [bookStart, chapterStart, verseStart] = startBookChapterVerse.split(":");
    const [bookEnd, chapterEnd, verseEnd] = endBookChapterVerse.split(":");
    const formattedChapterStart = chapterStart.padStart(3, "0");
    const formattedVerseStart = verseStart.padStart(3, "0");
    const formattedChapterEnd = chapterEnd.padStart(3, "0");
    const formattedVerseEnd = verseEnd.padStart(3, "0");
    const formattedReferenceStart = `${bookStart}${formattedChapterStart}${formattedVerseStart}`;
    const formattedReferenceEnd = `${bookEnd}${formattedChapterEnd}${formattedVerseEnd}`;
    const formattedReference = `${formattedReferenceStart}-${formattedReferenceEnd}`;
    return `jwlibrary:///finder?bible=${formattedReference}`;
  }
  convertPublicationReference(url) {
    const parts = url.split("/");
    const pubRef = parts[3];
    const [locale, docId] = pubRef.split(":");
    const paragraph = parts[4];
    return `jwlibrary:///finder?wtlocale=${locale}&docid=${docId}&par=${paragraph}`;
  }
  convertLinks(content, type) {
    const wikiLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
    return content.replace(wikiLinkRegex, (match, text, url) => {
      if (url.startsWith("jwpub://b/") && (type === "bible" || type === "all")) {
        return `[${text}](${this.convertBibleReference(url)})`;
      }
      if (url.startsWith("jwpub://p/") && (type === "publication" || type === "all")) {
        return `[${text}](${this.convertPublicationReference(url)})`;
      }
      return match;
    });
  }
  convertBibleTextToLink(input) {
    try {
      const reference = this.parseBibleReference(input);
      return this.formatJWLibraryLink(reference);
    } catch (error) {
      console.error("Error converting Bible text:", error.message);
      return input;
    }
  }
  parseBibleReference(input) {
    input = input.trim().toLowerCase();
    const match = input.match(/^([a-z0-9äöüß]+?)(?:\s*(\d+)\s*:\s*(\d+)(?:\s*-\s*(\d+))?$)/i);
    if (!match) {
      throw new Error("Invalid format");
    }
    const [, bookName, chapter, verseStart, verseEnd] = match;
    const bookIndex = this.findBookIndex(bookName.trim());
    if (bookIndex === -1) {
      throw new Error("Book not found");
    }
    return {
      book: bookIndex < 10 ? `0${bookIndex}` : bookIndex.toString(),
      chapter: chapter.padStart(3, "0"),
      verse: verseStart.padStart(3, "0"),
      endVerse: verseEnd ? verseEnd.padStart(3, "0") : void 0
    };
  }
  findBookIndex(bookQuery) {
    bookQuery = bookQuery.toLowerCase().trim();
    for (const book of bibleBooksDE) {
      if (book.aliases.includes(bookQuery)) {
        return book.id;
      }
    }
    return -1;
  }
  formatJWLibraryLink(reference) {
    const baseReference = `${reference.book}${reference.chapter}${reference.verse}`;
    const rangeReference = reference.endVerse ? `-${reference.book}${reference.chapter}${reference.endVerse}` : "";
    return `jwlibrary:///finder?bible=${baseReference}${rangeReference}`;
  }
  formatBibleText(input) {
    try {
      const reference = this.parseBibleReference(input);
      const bookIndex = parseInt(reference.book) - 1;
      const bookEntry = bibleBooksDE[bookIndex];
      const bookName = this.settings.useShortNames ? bookEntry.shortName : bookEntry.longName;
      const verseRef = reference.endVerse ? `${parseInt(reference.verse)}-${parseInt(reference.endVerse)}` : parseInt(reference.verse);
      return `${bookName} ${parseInt(reference.chapter)}:${verseRef}`;
    } catch (error) {
      return input;
    }
  }
  convertBibleTextToMarkdownLink(input) {
    try {
      const url = this.convertBibleTextToLink(input);
      const formattedText = this.formatBibleText(input);
      if (url !== input) {
        return `[${formattedText}](${url})`;
      }
      return input;
    } catch (error) {
      return input;
    }
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "replace-links",
      name: "Replace all links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "all");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-bible-links",
      name: "Replace Bible verse links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "bible");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-publication-links",
      name: "Replace publication links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "publication");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "convert-bible-text",
      name: "Convert Bible reference to Library link",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        if (selection) {
          const convertedLink = this.convertBibleTextToMarkdownLink(selection);
          editor.replaceSelection(convertedLink);
        }
      }
    });
    this.addSettingTab(new LinkReplacerSettingTab(this.app, this));
    this.bibleSuggester = new BibleReferenceSuggester(this);
    this.registerEditorSuggest(this.bibleSuggester);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkReplacerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Use short names in Bible links").setDesc('When enabled, Bible references will use abbreviated book names (e.g., "1Pe" instead of "1. Peter")').addToggle((toggle) => toggle.setValue(this.plugin.settings.useShortNames).onChange(async (value) => {
      this.plugin.settings.useShortNames = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
