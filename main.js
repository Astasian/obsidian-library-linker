/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LibraryLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/bibleBooks.ts
var bibleBooksDE = [
  ["1mo", "1mose"],
  ["2mo", "2mose"],
  ["3mo", "3mose"],
  ["4mo", "4mose"],
  ["5mo", "5mose"],
  ["jos", "josua"],
  ["ri", "richter"],
  ["ru", "ruth"],
  ["1sam", "1samuel"],
  ["2sam", "2samuel"],
  ["1k\xF6", "1k\xF6nige"],
  ["2k\xF6", "2k\xF6nige"],
  ["1chr", "1chronika"],
  ["2chr", "2chronika"],
  ["esr", "esra"],
  ["neh", "nehemia"],
  ["est", "esther"],
  ["hi", "hiob"],
  ["ps", "psalmen"],
  ["spr", "spr\xFCche"],
  ["pred", "prediger"],
  ["hoh", "hohes lied"],
  ["jes", "jesaja"],
  ["jer", "jeremia"],
  ["klag", "klagelieder"],
  ["hes", "hesekiel"],
  ["dan", "daniel"],
  ["hos", "hosea"],
  ["joe", "joel"],
  ["am", "amos"],
  ["ob", "obadja"],
  ["jon", "jona"],
  ["mi", "micha"],
  ["nah", "nahum"],
  ["hab", "habakuk"],
  ["zeph", "zephanja"],
  ["hag", "haggai"],
  ["sach", "sacharja"],
  ["mal", "maleachi"],
  ["mat", "matth\xE4us"],
  ["mar", "markus"],
  ["luk", "lukas"],
  ["joh", "johannes"],
  ["apg", "apostelgeschichte"],
  ["r\xF6m", "r\xF6mer"],
  ["1kor", "1korinther"],
  ["2kor", "2korinther"],
  ["gal", "galater"],
  ["eph", "epheser"],
  ["phil", "philipper"],
  ["kol", "kolosser"],
  ["1thes", "1thessalonicher"],
  ["2thes", "2thessalonicher"],
  ["1tim", "1timotheus"],
  ["2tim", "2timotheus"],
  ["tit", "titus"],
  ["philem", "philemon"],
  ["heb", "hebr\xE4er"],
  ["jak", "jakobus"],
  ["1pet", "1petrus"],
  ["2pet", "2petrus"],
  ["1joh", "1johannes"],
  ["2joh", "2johannes"],
  ["3joh", "3johannes"],
  ["jud", "judas"],
  ["offb", "offenbarung"]
];

// main.ts
var DEFAULT_SETTINGS = {
  // Default settings will go here
};
var BibleReferenceSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const matchLink = subString.match(/\/b\s+([a-z0-9äöüß]+)\s*(\d+:\d+(?:-\d+)?)?$/i);
    const matchOpen = subString.match(/\/bo\s+([a-z0-9äöüß]+)\s*(\d+:\d+(?:-\d+)?)?$/i);
    if (!matchLink && !matchOpen)
      return null;
    const match = matchOpen || matchLink;
    if (!match)
      return null;
    return {
      start: {
        ch: match.index,
        line: cursor.line
      },
      end: cursor,
      query: {
        text: match[1] && match[2] ? `${match[1]} ${match[2]}` : "",
        command: matchOpen ? "open" : "link"
      }
    };
  }
  getSuggestions(context) {
    if (context.query.text.match(/^[a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?$/i)) {
      return [{
        text: context.query.text,
        command: context.query.command
      }];
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    const action = suggestion.command === "open" ? "Convert and open" : "Convert";
    el.setText(`${action} "${suggestion.text}" to JW Library link`);
  }
  selectSuggestion(suggestion) {
    if (!this.context)
      return;
    const { context } = this;
    const editor = context.editor;
    const convertedLink = this.plugin.convertBibleTextToMarkdownLink(suggestion.text);
    editor.replaceRange(
      convertedLink,
      context.start,
      context.end
    );
    if (suggestion.command === "open") {
      const url = this.plugin.convertBibleTextToLink(suggestion.text);
      window.open(url);
    }
  }
};
var LibraryLinkerPlugin = class extends import_obsidian.Plugin {
  convertBibleReference(url) {
    url = url.replace("jwpub://", "jwlibrary://");
    const parts = url.split("/");
    const bibleRef = parts[parts.length - 1];
    const [startBookChapterVerse, endBookChapterVerse] = bibleRef.split("-");
    const [bookStart, chapterStart, verseStart] = startBookChapterVerse.split(":");
    const [bookEnd, chapterEnd, verseEnd] = endBookChapterVerse.split(":");
    const formattedChapterStart = chapterStart.padStart(3, "0");
    const formattedVerseStart = verseStart.padStart(3, "0");
    const formattedChapterEnd = chapterEnd.padStart(3, "0");
    const formattedVerseEnd = verseEnd.padStart(3, "0");
    const formattedReferenceStart = `${bookStart}${formattedChapterStart}${formattedVerseStart}`;
    const formattedReferenceEnd = `${bookEnd}${formattedChapterEnd}${formattedVerseEnd}`;
    const formattedReference = `${formattedReferenceStart}-${formattedReferenceEnd}`;
    return `jwlibrary:///finder?bible=${formattedReference}`;
  }
  convertPublicationReference(url) {
    const parts = url.split("/");
    const pubRef = parts[3];
    const [locale, docId] = pubRef.split(":");
    const paragraph = parts[4];
    return `jwlibrary:///finder?wtlocale=${locale}&docid=${docId}&par=${paragraph}`;
  }
  convertLinks(content, type) {
    const wikiLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
    return content.replace(wikiLinkRegex, (match, text, url) => {
      if (url.startsWith("jwpub://b/") && (type === "bible" || type === "all")) {
        return `[${text}](${this.convertBibleReference(url)})`;
      }
      if (url.startsWith("jwpub://p/") && (type === "publication" || type === "all")) {
        return `[${text}](${this.convertPublicationReference(url)})`;
      }
      return match;
    });
  }
  convertBibleTextToLink(input) {
    try {
      const reference = this.parseBibleReference(input);
      return this.formatJWLibraryLink(reference);
    } catch (error) {
      console.error("Error converting Bible text:", error.message);
      return input;
    }
  }
  parseBibleReference(input) {
    input = input.trim().toLowerCase();
    const match = input.match(/^([a-z0-9äöüß]+)\s*(\d+):(\d+)(?:-(\d+))?$/i);
    if (!match) {
      throw new Error("Invalid format");
    }
    const [, bookQuery, chapter, verse, endVerse] = match;
    const bookIndex = this.findBookIndex(bookQuery);
    if (bookIndex === -1) {
      throw new Error("Book not found");
    }
    return {
      book: bookIndex < 10 ? `0${bookIndex}` : bookIndex.toString(),
      chapter: chapter.padStart(3, "0"),
      verse: verse.padStart(3, "0"),
      endVerse: endVerse == null ? void 0 : endVerse.padStart(3, "0")
    };
  }
  findBookIndex(bookQuery) {
    for (let i = 0; i < bibleBooksDE.length; i++) {
      if (bibleBooksDE[i].includes(bookQuery)) {
        return i + 1;
      }
    }
    return -1;
  }
  formatJWLibraryLink(reference) {
    const baseReference = `${reference.book}${reference.chapter}${reference.verse}`;
    const rangeReference = reference.endVerse ? `-${reference.book}${reference.chapter}${reference.endVerse}` : "";
    return `jwlibrary:///finder?bible=${baseReference}${rangeReference}`;
  }
  formatBibleText(input) {
    const trimmed = input.trim();
    const match = trimmed.match(/^([a-z0-9äöüß]+)\s*(\d+):(\d+)(?:-(\d+))?$/i);
    if (!match)
      return input;
    const [, book, chapter, verse, endVerse] = match;
    const bookIndex = this.findBookIndex(book);
    let formattedBook = book;
    if (bookIndex !== -1) {
      formattedBook = bibleBooksDE[bookIndex - 1][1];
    }
    if (formattedBook) {
      if (formattedBook.match(/^\d/)) {
        formattedBook = formattedBook.replace(
          /^(\d+)(\w+)/,
          (_, num, word) => `${num}. ${word.charAt(0).toUpperCase()}${word.slice(1)}`
        );
      } else if (formattedBook.includes(" ")) {
        formattedBook = formattedBook.split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
      } else {
        formattedBook = formattedBook.charAt(0).toUpperCase() + formattedBook.slice(1);
      }
    }
    return endVerse ? `${formattedBook} ${chapter}:${verse}-${endVerse}` : `${formattedBook} ${chapter}:${verse}`;
  }
  convertBibleTextToMarkdownLink(input) {
    const url = this.convertBibleTextToLink(input);
    const formattedText = this.formatBibleText(input);
    return `[${formattedText}](${url})`;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "replace-links",
      name: "Replace all links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "all");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-bible-links",
      name: "Replace Bible verse links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "bible");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-publication-links",
      name: "Replace publication links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "publication");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "convert-bible-text",
      name: "Convert Bible reference to Library link",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        if (selection) {
          const convertedLink = this.convertBibleTextToMarkdownLink(selection);
          editor.replaceSelection(convertedLink);
        }
      }
    });
    this.addSettingTab(new LinkReplacerSettingTab(this.app, this));
    this.bibleSuggester = new BibleReferenceSuggester(this);
    this.registerEditorSuggest(this.bibleSuggester);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkReplacerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
