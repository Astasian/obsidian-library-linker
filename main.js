/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LibraryLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/bibleBooks.ts
var bibleBooksDE = [
  { "1mo": "1. Mose" },
  { "2mo": "2. Mose" },
  { "3mo": "3. Mose" },
  { "4mo": "4. Mose" },
  { "5mo": "5. Mose" },
  { "jos": "Josua" },
  { "ri": "Richter" },
  { "ru": "Ruth" },
  { "1sam": "1. Samuel" },
  { "2sam": "2. Samuel" },
  { "1k\xF6": "1. K\xF6nige" },
  { "2k\xF6": "2. K\xF6nige" },
  { "1ch": "1. Chronika" },
  { "2ch": "2. Chronika" },
  { "esr": "Esra" },
  { "neh": "Nehemia" },
  { "est": "Esther" },
  { "hi": "Hiob" },
  { "ps": "Psalm" },
  { "spr": "Spr\xFCche" },
  { "pred": "Prediger" },
  { "hoh": "Hohes Lied" },
  { "jes": "Jesaja" },
  { "jer": "Jeremia" },
  { "klag": "Klagelieder" },
  { "hes": "Hesekiel" },
  { "dan": "Daniel" },
  { "hos": "Hosea" },
  { "joe": "Joel" },
  { "am": "Amos" },
  { "ob": "Obadja" },
  { "jon": "Jona" },
  { "mi": "Micha" },
  { "nah": "Nahum" },
  { "hab": "Habakuk" },
  { "zeph": "Zephanja" },
  { "hag": "Haggai" },
  { "sach": "Sacharja" },
  { "mal": "Maleachi" },
  { "mat": "Matth\xE4us" },
  { "mar": "Markus" },
  { "luk": "Lukas" },
  { "joh": "Johannes" },
  { "apg": "Apostelgeschichte" },
  { "r\xF6m": "R\xF6mer" },
  { "1kor": "1. Korinther" },
  { "2kor": "2. Korinther" },
  { "gal": "Galater" },
  { "eph": "Epheser" },
  { "phil": "Philipper" },
  { "kol": "Kolosser" },
  { "1thes": "1. Thessalonicher" },
  { "2thes": "2. Thessalonicher" },
  { "1tim": "1. Timotheus" },
  { "2tim": "2. Timotheus" },
  { "tit": "Titus" },
  { "philem": "Philemon" },
  { "heb": "Hebr\xE4er" },
  { "jak": "Jakobus" },
  { "1pet": "1. Petrus" },
  { "2pet": "2. Petrus" },
  { "1joh": "1. Johannes" },
  { "2joh": "2. Johannes" },
  { "3joh": "3. Johannes" },
  { "jud": "Judas" },
  { "offb": "Offenbarung" }
];

// main.ts
var DEFAULT_SETTINGS = {
  // Default settings will go here
};
var BibleReferenceSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const matchLink = subString.match(/\/b\s+([a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?)?$/i);
    const matchOpen = subString.match(/\/bo\s+([a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?)?$/i);
    if (!matchLink && !matchOpen)
      return null;
    const match = matchOpen || matchLink;
    if (!match)
      return null;
    return {
      start: {
        ch: match.index,
        line: cursor.line
      },
      end: cursor,
      query: match[1] || ""
    };
  }
  getSuggestions(context) {
    const query = context.query;
    const line = context.editor.getLine(context.start.line);
    const isOpenCommand = line.substring(0, context.start.ch + 3) === "/bo";
    if (query.match(/^[a-z0-9äöüß]+\s*\d+:\d+(?:-\d+)?$/i)) {
      return [{
        text: query,
        command: isOpenCommand ? "open" : "link"
      }];
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    const action = suggestion.command === "open" ? "Convert and open" : "Convert";
    el.setText(`${action} "${suggestion.text}" to JW Library link`);
  }
  selectSuggestion(suggestion) {
    if (!this.context)
      return;
    const { context } = this;
    const editor = context.editor;
    const convertedLink = this.plugin.convertBibleTextToMarkdownLink(suggestion.text);
    editor.replaceRange(
      convertedLink,
      context.start,
      context.end
    );
    if (suggestion.command === "open") {
      const url = this.plugin.convertBibleTextToLink(suggestion.text);
      window.open(url);
    }
  }
};
var LibraryLinkerPlugin = class extends import_obsidian.Plugin {
  convertBibleReference(url) {
    url = url.replace("jwpub://", "jwlibrary://");
    const parts = url.split("/");
    const bibleRef = parts[parts.length - 1];
    const [startBookChapterVerse, endBookChapterVerse] = bibleRef.split("-");
    const [bookStart, chapterStart, verseStart] = startBookChapterVerse.split(":");
    const [bookEnd, chapterEnd, verseEnd] = endBookChapterVerse.split(":");
    const formattedChapterStart = chapterStart.padStart(3, "0");
    const formattedVerseStart = verseStart.padStart(3, "0");
    const formattedChapterEnd = chapterEnd.padStart(3, "0");
    const formattedVerseEnd = verseEnd.padStart(3, "0");
    const formattedReferenceStart = `${bookStart}${formattedChapterStart}${formattedVerseStart}`;
    const formattedReferenceEnd = `${bookEnd}${formattedChapterEnd}${formattedVerseEnd}`;
    const formattedReference = `${formattedReferenceStart}-${formattedReferenceEnd}`;
    return `jwlibrary:///finder?bible=${formattedReference}`;
  }
  convertPublicationReference(url) {
    const parts = url.split("/");
    const pubRef = parts[3];
    const [locale, docId] = pubRef.split(":");
    const paragraph = parts[4];
    return `jwlibrary:///finder?wtlocale=${locale}&docid=${docId}&par=${paragraph}`;
  }
  convertLinks(content, type) {
    const wikiLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
    return content.replace(wikiLinkRegex, (match, text, url) => {
      if (url.startsWith("jwpub://b/") && (type === "bible" || type === "all")) {
        return `[${text}](${this.convertBibleReference(url)})`;
      }
      if (url.startsWith("jwpub://p/") && (type === "publication" || type === "all")) {
        return `[${text}](${this.convertPublicationReference(url)})`;
      }
      return match;
    });
  }
  convertBibleTextToLink(input) {
    try {
      const reference = this.parseBibleReference(input);
      return this.formatJWLibraryLink(reference);
    } catch (error) {
      console.error("Error converting Bible text:", error.message);
      return input;
    }
  }
  parseBibleReference(input) {
    input = input.trim().toLowerCase();
    const match = input.match(/^([a-z0-9äöüß]+?)(?:\s*(\d+)\s*:\s*(\d+)(?:\s*-\s*(\d+))?$)/i);
    if (!match) {
      throw new Error("Invalid format");
    }
    const [, bookName, chapter, verseStart, verseEnd] = match;
    const bookIndex = this.findBookIndex(bookName.trim());
    if (bookIndex === -1) {
      throw new Error("Book not found");
    }
    return {
      book: bookIndex < 10 ? `0${bookIndex}` : bookIndex.toString(),
      chapter: chapter.padStart(3, "0"),
      verse: verseStart.padStart(3, "0"),
      endVerse: verseEnd ? verseEnd.padStart(3, "0") : void 0
    };
  }
  findBookIndex(bookQuery) {
    bookQuery = bookQuery.toLowerCase().trim();
    for (let i = 0; i < bibleBooksDE.length; i++) {
      const bookEntry = bibleBooksDE[i];
      const abbreviation = Object.keys(bookEntry)[0].toLowerCase();
      if (bookQuery === abbreviation) {
        return i + 1;
      }
    }
    return -1;
  }
  formatJWLibraryLink(reference) {
    const baseReference = `${reference.book}${reference.chapter}${reference.verse}`;
    const rangeReference = reference.endVerse ? `-${reference.book}${reference.chapter}${reference.endVerse}` : "";
    return `jwlibrary:///finder?bible=${baseReference}${rangeReference}`;
  }
  formatBibleText(input) {
    try {
      const reference = this.parseBibleReference(input);
      const bookIndex = parseInt(reference.book) - 1;
      const bookEntry = bibleBooksDE[bookIndex];
      const formattedBook = Object.values(bookEntry)[0];
      const verseRef = reference.endVerse ? `${parseInt(reference.verse)}-${parseInt(reference.endVerse)}` : parseInt(reference.verse);
      return `${formattedBook} ${parseInt(reference.chapter)}:${verseRef}`;
    } catch (error) {
      return input;
    }
  }
  convertBibleTextToMarkdownLink(input) {
    try {
      const url = this.convertBibleTextToLink(input);
      const formattedText = this.formatBibleText(input);
      if (url !== input) {
        return `[${formattedText}](${url})`;
      }
      return input;
    } catch (error) {
      return input;
    }
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "replace-links",
      name: "Replace all links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "all");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-bible-links",
      name: "Replace Bible verse links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "bible");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-publication-links",
      name: "Replace publication links",
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = this.convertLinks(currentContent, "publication");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "convert-bible-text",
      name: "Convert Bible reference to Library link",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        if (selection) {
          const convertedLink = this.convertBibleTextToMarkdownLink(selection);
          editor.replaceSelection(convertedLink);
        }
      }
    });
    this.addSettingTab(new LinkReplacerSettingTab(this.app, this));
    this.bibleSuggester = new BibleReferenceSuggester(this);
    this.registerEditorSuggest(this.bibleSuggester);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkReplacerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
