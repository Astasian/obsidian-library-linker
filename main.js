/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LibraryLinkerPlugin,
  matchingBibleReferenceRegex: () => matchingBibleReferenceRegex
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/utils/convertBibleReference.ts
function convertBibleReference(url) {
  url = url.replace("jwpub://", "jwlibrary://");
  const parts = url.split("/");
  const bibleRef = parts[parts.length - 1];
  const [startBookChapterVerse, endBookChapterVerse] = bibleRef.split("-");
  const [bookStart, chapterStart, verseStart] = startBookChapterVerse.split(":");
  const [bookEnd, chapterEnd, verseEnd] = endBookChapterVerse.split(":");
  const formattedChapterStart = chapterStart.padStart(3, "0");
  const formattedVerseStart = verseStart.padStart(3, "0");
  const formattedChapterEnd = chapterEnd.padStart(3, "0");
  const formattedVerseEnd = verseEnd.padStart(3, "0");
  const formattedReferenceStart = `${bookStart}${formattedChapterStart}${formattedVerseStart}`;
  const formattedReferenceEnd = `${bookEnd}${formattedChapterEnd}${formattedVerseEnd}`;
  const formattedReference = formattedReferenceStart === formattedReferenceEnd ? formattedReferenceStart : `${formattedReferenceStart}-${formattedReferenceEnd}`;
  return `jwlibrary:///finder?bible=${formattedReference}`;
}

// src/utils/convertPublicationReference.ts
function convertPublicationReference(url) {
  const parts = url.split("/");
  const pubRef = parts[3];
  const [locale, docId] = pubRef.split(":");
  const paragraph = parts[4];
  return `jwlibrary:///finder?wtlocale=${locale}&docid=${docId}&par=${paragraph}`;
}

// src/utils/convertLinks.ts
function convertLinks(content, type = "all") {
  const wikiLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
  return content.replace(wikiLinkRegex, (match, text, url) => {
    if (url.startsWith("jwpub://b/") && (type === "bible" || type === "all")) {
      return `[${text}](${convertBibleReference(url)})`;
    }
    if (url.startsWith("jwpub://p/") && (type === "publication" || type === "all")) {
      return `[${text}](${convertPublicationReference(url)})`;
    }
    return match;
  });
}

// src/bibleBooks/de.ts
var bibleBooksDE = [
  {
    id: 1,
    aliases: ["1mo", "1.mo", "1mose", "1.mose"],
    longName: "1. Mose",
    shortName: "1Mo"
  },
  {
    id: 2,
    aliases: ["2mo", "2.mo", "2mose", "2.mose"],
    longName: "2. Mose",
    shortName: "2Mo"
  },
  {
    id: 3,
    aliases: ["3mo", "3.mo", "3mose", "3.mose"],
    longName: "3. Mose",
    shortName: "3Mo"
  },
  {
    id: 4,
    aliases: ["4mo", "4.mo", "4mose", "4.mose"],
    longName: "4. Mose",
    shortName: "4Mo"
  },
  {
    id: 5,
    aliases: ["5mo", "5.mo", "5mose", "5.mose"],
    longName: "5. Mose",
    shortName: "5Mo"
  },
  {
    id: 6,
    aliases: ["jos", "josua"],
    longName: "Josua",
    shortName: "Jos"
  },
  {
    id: 7,
    aliases: ["ri", "richt", "richter"],
    longName: "Richter",
    shortName: "Ri"
  },
  {
    id: 8,
    aliases: ["ru", "rut", "ruth"],
    longName: "Ruth",
    shortName: "Ru"
  },
  {
    id: 9,
    aliases: ["1sam", "1.sam", "1samuel", "1.samuel"],
    longName: "1. Samuel",
    shortName: "1Sam"
  },
  {
    id: 10,
    aliases: ["2sam", "2.sam", "2samuel", "2.samuel"],
    longName: "2. Samuel",
    shortName: "2Sam"
  },
  {
    id: 11,
    aliases: ["1k\xF6", "1.k\xF6", "1k\xF6n", "1.k\xF6n", "1k\xF6nige", "1.k\xF6nige"],
    longName: "1. K\xF6nige",
    shortName: "1K\xF6"
  },
  {
    id: 12,
    aliases: ["2k\xF6", "2.k\xF6", "2k\xF6n", "2.k\xF6n", "2k\xF6nige", "2.k\xF6nige"],
    longName: "2. K\xF6nige",
    shortName: "2K\xF6"
  },
  {
    id: 13,
    aliases: [
      "1chr",
      "1.chr",
      "1chron",
      "1.chron",
      "1chronik",
      "1.chronik",
      "1chronika",
      "1.chronika"
    ],
    longName: "1. Chronika",
    shortName: "1Chr"
  },
  {
    id: 14,
    aliases: [
      "2chr",
      "2.chr",
      "2chron",
      "2.chron",
      "2chronik",
      "2.chronik",
      "2chronika",
      "2.chronika"
    ],
    longName: "2. Chronika",
    shortName: "2Chr"
  },
  {
    id: 15,
    aliases: ["esr", "esra"],
    longName: "Esra",
    shortName: "Esr"
  },
  {
    id: 16,
    aliases: ["neh", "nehem", "nehemia"],
    longName: "Nehemia",
    shortName: "Neh"
  },
  {
    id: 17,
    aliases: ["est", "esth", "ester", "esther"],
    longName: "Esther",
    shortName: "Esth"
  },
  {
    id: 18,
    aliases: ["hi", "hiob"],
    longName: "Hiob",
    shortName: "Hi"
  },
  {
    id: 19,
    aliases: ["ps", "psa", "psalm", "psalmen"],
    longName: "Psalm",
    shortName: "Ps"
  },
  {
    id: 20,
    aliases: ["spr", "spr\xFC", "sprue", "spr\xFCche"],
    longName: "Spr\xFCche",
    shortName: "Spr"
  },
  {
    id: 21,
    aliases: ["pred", "prediger"],
    longName: "Prediger",
    shortName: "Pred"
  },
  {
    id: 22,
    aliases: ["hoh", "hl", "hoheslied", "hohes lied"],
    longName: "Hohes Lied",
    shortName: "Hoh"
  },
  {
    id: 23,
    aliases: ["jes", "jesaja"],
    longName: "Jesaja",
    shortName: "Jes"
  },
  {
    id: 24,
    aliases: ["jer", "jeremia"],
    longName: "Jeremia",
    shortName: "Jer"
  },
  {
    id: 25,
    aliases: ["klag", "klg", "klgl", "klagelieder"],
    longName: "Klagelieder",
    shortName: "Klg"
  },
  {
    id: 26,
    aliases: ["hes", "hesekiel"],
    longName: "Hesekiel",
    shortName: "Hes"
  },
  {
    id: 27,
    aliases: ["dan", "daniel"],
    longName: "Daniel",
    shortName: "Dan"
  },
  {
    id: 28,
    aliases: ["hos", "hosea"],
    longName: "Hosea",
    shortName: "Hos"
  },
  {
    id: 29,
    aliases: ["joe", "joel"],
    longName: "Joel",
    shortName: "Joel"
  },
  {
    id: 30,
    aliases: ["am", "amos"],
    longName: "Amos",
    shortName: "Am"
  },
  {
    id: 31,
    aliases: ["ob", "obd", "obadja"],
    longName: "Obadja",
    shortName: "Ob"
  },
  {
    id: 32,
    aliases: ["jon", "jona"],
    longName: "Jona",
    shortName: "Jon"
  },
  {
    id: 33,
    aliases: ["mi", "micha"],
    longName: "Micha",
    shortName: "Mi"
  },
  {
    id: 34,
    aliases: ["nah", "nahum"],
    longName: "Nahum",
    shortName: "Nah"
  },
  {
    id: 35,
    aliases: ["hab", "habakuk"],
    longName: "Habakuk",
    shortName: "Hab"
  },
  {
    id: 36,
    aliases: ["zeph", "zefanja", "zephanja"],
    longName: "Zephanja",
    shortName: "Zeph"
  },
  {
    id: 37,
    aliases: ["hag", "haggai"],
    longName: "Haggai",
    shortName: "Hag"
  },
  {
    id: 38,
    aliases: ["sach", "sacharja"],
    longName: "Sacharja",
    shortName: "Sach"
  },
  {
    id: 39,
    aliases: ["mal", "maleachi"],
    longName: "Maleachi",
    shortName: "Mal"
  },
  {
    id: 40,
    aliases: ["mt", "mat", "matt", "matth", "matth\xE4us"],
    longName: "Matth\xE4us",
    shortName: "Mat"
  },
  {
    id: 41,
    aliases: ["mar", "markus"],
    longName: "Markus",
    shortName: "Mar"
  },
  {
    id: 42,
    aliases: ["lk", "luk", "lukas"],
    longName: "Lukas",
    shortName: "Luk"
  },
  {
    id: 43,
    aliases: ["joh", "johannes"],
    longName: "Johannes",
    shortName: "Joh"
  },
  {
    id: 44,
    aliases: ["apg", "apostelgeschichte"],
    longName: "Apostelgeschichte",
    shortName: "Apg"
  },
  {
    id: 45,
    aliases: ["r\xF6m", "r\xF6mer"],
    longName: "R\xF6mer",
    shortName: "R\xF6m"
  },
  {
    id: 46,
    aliases: ["1kor", "1.kor", "1korinther", "1.korinther"],
    longName: "1. Korinther",
    shortName: "1Kor"
  },
  {
    id: 47,
    aliases: ["2kor", "2.kor", "2korinther", "2.korinther"],
    longName: "2. Korinther",
    shortName: "2Kor"
  },
  {
    id: 48,
    aliases: ["gal", "galater"],
    longName: "Galater",
    shortName: "Gal"
  },
  {
    id: 49,
    aliases: ["eph", "epheser"],
    longName: "Epheser",
    shortName: "Eph"
  },
  {
    id: 50,
    aliases: ["phil", "philipper"],
    longName: "Philipper",
    shortName: "Phil"
  },
  {
    id: 51,
    aliases: ["kol", "kolosser"],
    longName: "Kolosser",
    shortName: "Kol"
  },
  {
    id: 52,
    aliases: ["1th", "1.th", "1thes", "1.thes", "1thessalonicher", "1.thessalonicher"],
    longName: "1. Thessalonicher",
    shortName: "1Th"
  },
  {
    id: 53,
    aliases: ["2th", "2.th", "2thes", "2.thes", "2thessalonicher", "2.thessalonicher"],
    longName: "2. Thessalonicher",
    shortName: "2Th"
  },
  {
    id: 54,
    aliases: ["1tim", "1.tim", "1timotheus", "1.timotheus"],
    longName: "1. Timotheus",
    shortName: "1Tim"
  },
  {
    id: 55,
    aliases: ["2tim", "2.tim", "2timotheus", "2.timotheus"],
    longName: "2. Timotheus",
    shortName: "2Tim"
  },
  {
    id: 56,
    aliases: ["tit", "titus"],
    longName: "Titus",
    shortName: "Tit"
  },
  {
    id: 57,
    aliases: ["phm", "phlm", "philemon"],
    longName: "Philemon",
    shortName: "Phm"
  },
  {
    id: 58,
    aliases: ["hebr", "heb", "hebr\xE4er"],
    longName: "Hebr\xE4er",
    shortName: "Hebr"
  },
  {
    id: 59,
    aliases: ["jak", "jakobus"],
    longName: "Jakobus",
    shortName: "Jak"
  },
  {
    id: 60,
    aliases: ["1pe", "1.pe", "1pet", "1.pet", "1petrus", "1.petrus"],
    longName: "1. Petrus",
    shortName: "1Pe"
  },
  {
    id: 61,
    aliases: ["2pe", "2.pe", "2pet", "2.pet", "2petrus", "2.petrus"],
    longName: "2. Petrus",
    shortName: "2Pe"
  },
  {
    id: 62,
    aliases: ["1joh", "1.joh", "1johannes", "1.johannes"],
    longName: "1. Johannes",
    shortName: "1Joh"
  },
  {
    id: 63,
    aliases: ["2joh", "2.joh", "2johannes", "2.johannes"],
    longName: "2. Johannes",
    shortName: "2Joh"
  },
  {
    id: 64,
    aliases: ["3joh", "3.joh", "3johannes", "3.johannes"],
    longName: "3. Johannes",
    shortName: "3Joh"
  },
  {
    id: 65,
    aliases: ["jud", "judas"],
    longName: "Judas",
    shortName: "Jud"
  },
  {
    id: 66,
    aliases: ["off", "offb", "offenbarung", "offenb"],
    longName: "Offenbarung",
    shortName: "Off"
  }
];

// src/bibleBooks/en.ts
var bibleBooksEN = [
  {
    id: 1,
    aliases: ["gen", "ge", "genesis"],
    longName: "Genesis",
    shortName: "Ge"
  },
  {
    id: 2,
    aliases: ["ex", "exo", "exodus"],
    longName: "Exodus",
    shortName: "Ex"
  },
  {
    id: 3,
    aliases: ["lev", "le", "leviticus"],
    longName: "Leviticus",
    shortName: "Le"
  },
  {
    id: 4,
    aliases: ["num", "nu", "numbers"],
    longName: "Numbers",
    shortName: "Nu"
  },
  {
    id: 5,
    aliases: ["deut", "de", "deuteronomy"],
    longName: "Deuteronomy",
    shortName: "De"
  },
  {
    id: 6,
    aliases: ["jos", "joshua"],
    longName: "Joshua",
    shortName: "Jos"
  },
  {
    id: 7,
    aliases: ["jg", "judg", "judges"],
    longName: "Judges",
    shortName: "Jg"
  },
  {
    id: 8,
    aliases: ["ru", "rut", "ruth"],
    longName: "Ruth",
    shortName: "Ru"
  },
  {
    id: 9,
    aliases: ["1sa", "1sam", "1samuel", "1.samuel"],
    longName: "1 Samuel",
    shortName: "1Sa"
  },
  {
    id: 10,
    aliases: ["2sa", "2sam", "2samuel", "2.samuel"],
    longName: "2 Samuel",
    shortName: "2Sa"
  },
  {
    id: 11,
    aliases: ["1ki", "1king", "1kings", "1.kings"],
    longName: "1 Kings",
    shortName: "1Ki"
  },
  {
    id: 12,
    aliases: ["2ki", "2king", "2kings", "2.kings"],
    longName: "2 Kings",
    shortName: "2Ki"
  },
  {
    id: 13,
    aliases: ["1ch", "1chr", "1chron", "1chronicles"],
    longName: "1 Chronicles",
    shortName: "1Ch"
  },
  {
    id: 14,
    aliases: ["2ch", "2chr", "2chron", "2chronicles"],
    longName: "2 Chronicles",
    shortName: "2Ch"
  },
  {
    id: 15,
    aliases: ["ezr", "ezra"],
    longName: "Ezra",
    shortName: "Ezr"
  },
  {
    id: 16,
    aliases: ["ne", "neh", "nehemiah"],
    longName: "Nehemiah",
    shortName: "Ne"
  },
  {
    id: 17,
    aliases: ["es", "est", "esther"],
    longName: "Esther",
    shortName: "Es"
  },
  {
    id: 18,
    aliases: ["job"],
    longName: "Job",
    shortName: "Job"
  },
  {
    id: 19,
    aliases: ["ps", "psa", "psalm", "psalms"],
    longName: "Psalms",
    shortName: "Ps"
  },
  {
    id: 20,
    aliases: ["pr", "pro", "prov", "proverbs"],
    longName: "Proverbs",
    shortName: "Pr"
  },
  {
    id: 21,
    aliases: ["ec", "ecc", "eccl", "ecclesiastes"],
    longName: "Ecclesiastes",
    shortName: "Ec"
  },
  {
    id: 22,
    aliases: ["ca", "can", "song", "songofsolomon", "songofsongs"],
    longName: "Song of Solomon",
    shortName: "Ca"
  },
  {
    id: 23,
    aliases: ["isa", "is", "isaiah"],
    longName: "Isaiah",
    shortName: "Isa"
  },
  {
    id: 24,
    aliases: ["jer", "jeremiah"],
    longName: "Jeremiah",
    shortName: "Jer"
  },
  {
    id: 25,
    aliases: ["la", "lam", "lamentations"],
    longName: "Lamentations",
    shortName: "La"
  },
  {
    id: 26,
    aliases: ["eze", "ezek", "ezekiel"],
    longName: "Ezekiel",
    shortName: "Eze"
  },
  {
    id: 27,
    aliases: ["da", "dan", "daniel"],
    longName: "Daniel",
    shortName: "Da"
  },
  {
    id: 28,
    aliases: ["ho", "hos", "hosea"],
    longName: "Hosea",
    shortName: "Ho"
  },
  {
    id: 29,
    aliases: ["joe", "joel"],
    longName: "Joel",
    shortName: "Joe"
  },
  {
    id: 30,
    aliases: ["am", "amos"],
    longName: "Amos",
    shortName: "Am"
  },
  {
    id: 31,
    aliases: ["ob", "oba", "obadiah"],
    longName: "Obadiah",
    shortName: "Ob"
  },
  {
    id: 32,
    aliases: ["jon", "jnh", "jonah"],
    longName: "Jonah",
    shortName: "Jon"
  },
  {
    id: 33,
    aliases: ["mic", "micah"],
    longName: "Micah",
    shortName: "Mic"
  },
  {
    id: 34,
    aliases: ["na", "nah", "nahum"],
    longName: "Nahum",
    shortName: "Na"
  },
  {
    id: 35,
    aliases: ["hab", "habakkuk"],
    longName: "Habakkuk",
    shortName: "Hab"
  },
  {
    id: 36,
    aliases: ["zep", "zeph", "zephaniah"],
    longName: "Zephaniah",
    shortName: "Zep"
  },
  {
    id: 37,
    aliases: ["hag", "haggai"],
    longName: "Haggai",
    shortName: "Hag"
  },
  {
    id: 38,
    aliases: ["zec", "zech", "zechariah"],
    longName: "Zechariah",
    shortName: "Zec"
  },
  {
    id: 39,
    aliases: ["mal", "malachi"],
    longName: "Malachi",
    shortName: "Mal"
  },
  {
    id: 40,
    aliases: ["mt", "mat", "matt", "matthew"],
    longName: "Matthew",
    shortName: "Mt"
  },
  {
    id: 41,
    aliases: ["mr", "mark"],
    longName: "Mark",
    shortName: "Mr"
  },
  {
    id: 42,
    aliases: ["lu", "luk", "luke"],
    longName: "Luke",
    shortName: "Lu"
  },
  {
    id: 43,
    aliases: ["joh", "john"],
    longName: "John",
    shortName: "Joh"
  },
  {
    id: 44,
    aliases: ["ac", "act", "acts"],
    longName: "Acts",
    shortName: "Ac"
  },
  {
    id: 45,
    aliases: ["ro", "rom", "romans"],
    longName: "Romans",
    shortName: "Ro"
  },
  {
    id: 46,
    aliases: ["1co", "1cor", "1corinthians"],
    longName: "1 Corinthians",
    shortName: "1Co"
  },
  {
    id: 47,
    aliases: ["2co", "2cor", "2corinthians"],
    longName: "2 Corinthians",
    shortName: "2Co"
  },
  {
    id: 48,
    aliases: ["ga", "gal", "galatians"],
    longName: "Galatians",
    shortName: "Ga"
  },
  {
    id: 49,
    aliases: ["eph", "ephesians"],
    longName: "Ephesians",
    shortName: "Eph"
  },
  {
    id: 50,
    aliases: ["php", "phil", "philippians"],
    longName: "Philippians",
    shortName: "Php"
  },
  {
    id: 51,
    aliases: ["col", "colossians"],
    longName: "Colossians",
    shortName: "Col"
  },
  {
    id: 52,
    aliases: ["1th", "1thess", "1thessalonians"],
    longName: "1 Thessalonians",
    shortName: "1Th"
  },
  {
    id: 53,
    aliases: ["2th", "2thess", "2thessalonians"],
    longName: "2 Thessalonians",
    shortName: "2Th"
  },
  {
    id: 54,
    aliases: ["1ti", "1tim", "1timothy"],
    longName: "1 Timothy",
    shortName: "1Ti"
  },
  {
    id: 55,
    aliases: ["2ti", "2tim", "2timothy"],
    longName: "2 Timothy",
    shortName: "2Ti"
  },
  {
    id: 56,
    aliases: ["tit", "titus"],
    longName: "Titus",
    shortName: "Tit"
  },
  {
    id: 57,
    aliases: ["phm", "phile", "philemon"],
    longName: "Philemon",
    shortName: "Phm"
  },
  {
    id: 58,
    aliases: ["heb", "hebrews"],
    longName: "Hebrews",
    shortName: "Heb"
  },
  {
    id: 59,
    aliases: ["jas", "james"],
    longName: "James",
    shortName: "Jas"
  },
  {
    id: 60,
    aliases: ["1pe", "1pet", "1peter"],
    longName: "1 Peter",
    shortName: "1Pe"
  },
  {
    id: 61,
    aliases: ["2pe", "2pet", "2peter"],
    longName: "2 Peter",
    shortName: "2Pe"
  },
  {
    id: 62,
    aliases: ["1jo", "1joh", "1john"],
    longName: "1 John",
    shortName: "1Jo"
  },
  {
    id: 63,
    aliases: ["2jo", "2joh", "2john"],
    longName: "2 John",
    shortName: "2Jo"
  },
  {
    id: 64,
    aliases: ["3jo", "3joh", "3john"],
    longName: "3 John",
    shortName: "3Jo"
  },
  {
    id: 65,
    aliases: ["jude"],
    longName: "Jude",
    shortName: "Jude"
  },
  {
    id: 66,
    aliases: ["re", "rev", "revelation"],
    longName: "Revelation",
    shortName: "Re"
  }
];

// src/bibleBooks/index.ts
var getBibleBooks = (language) => {
  switch (language) {
    case "E":
      return bibleBooksEN;
    case "X":
      return bibleBooksDE;
    default:
      throw new Error(`Unsupported language: ${language}`);
  }
};

// src/utils/findBookIndex.ts
function findBookIndex(bookQuery, language) {
  bookQuery = bookQuery.toLowerCase().trim();
  for (const book of getBibleBooks(language)) {
    if (book.aliases.includes(bookQuery)) {
      return book.id;
    }
  }
  return -1;
}

// src/utils/parseBibleReference.ts
function parseVerseNumber(verse) {
  const num = parseInt(verse, 10);
  if (isNaN(num) || num < 1) {
    throw new Error("Invalid verse number");
  }
  return num;
}
function padVerse(verse) {
  return verse.toString().padStart(3, "0");
}
function parseVerseRanges(versePart) {
  versePart = versePart.trim();
  if (versePart.endsWith(",")) {
    versePart = versePart.slice(0, -1);
  }
  const parts = versePart.split(",").map((p) => p.trim()).filter((p) => p.length > 0);
  if (parts.length !== versePart.split(",").length) {
    throw new Error("Invalid verse number");
  }
  const ranges = [];
  let lastEndVerse = 0;
  let currentRange = null;
  for (const part of parts) {
    if ((part.match(/-/g) || []).length > 1 || part.includes("--")) {
      throw new Error("Invalid verse number");
    }
    if (part.includes("-")) {
      const [start, end] = part.split("-").map((v) => {
        if (!v || v.startsWith("-")) {
          throw new Error("Invalid verse number");
        }
        return parseVerseNumber(v);
      });
      if (start >= end) {
        throw new Error("Verses must be in ascending order");
      }
      if (start <= lastEndVerse) {
        throw new Error("Verses must be in ascending order");
      }
      if (currentRange && start === lastEndVerse + 1) {
        currentRange.end = padVerse(end);
      } else {
        currentRange = {
          start: padVerse(start),
          end: padVerse(end)
        };
        ranges.push(currentRange);
      }
      lastEndVerse = end;
    } else {
      const verse = parseVerseNumber(part);
      if (verse <= lastEndVerse) {
        throw new Error("Verses must be in ascending order");
      }
      if (currentRange && verse === lastEndVerse + 1) {
        currentRange.end = padVerse(verse);
      } else {
        currentRange = {
          start: padVerse(verse),
          end: padVerse(verse)
        };
        ranges.push(currentRange);
      }
      lastEndVerse = verse;
    }
  }
  return ranges;
}
function parseBibleReference(input, language) {
  input = input.trim().toLowerCase();
  const match = input.match(/^([a-z0-9äöüß]+?)\s*(\d+)\s*:\s*(.+)$/i);
  if (!match) {
    throw new Error("Invalid format");
  }
  const [, bookName, chapter, versesPart] = match;
  const bookIndex = findBookIndex(bookName.trim(), language);
  if (bookIndex === -1) {
    throw new Error("Book not found");
  }
  const paddedBook = bookIndex < 10 ? `0${bookIndex}` : bookIndex.toString();
  const paddedChapter = chapter.padStart(3, "0");
  const simpleMatch = versesPart.match(/^(\d+)(?:-(\d+))?$/);
  if (simpleMatch) {
    const [, verse, endVerse] = simpleMatch;
    if (endVerse && parseVerseNumber(verse) >= parseVerseNumber(endVerse)) {
      throw new Error("Verses must be in ascending order");
    }
    return {
      book: paddedBook,
      chapter: paddedChapter,
      verseRanges: [
        {
          start: padVerse(parseVerseNumber(verse)),
          end: endVerse ? padVerse(parseVerseNumber(endVerse)) : padVerse(parseVerseNumber(verse))
        }
      ]
    };
  }
  try {
    const verseRanges = parseVerseRanges(versesPart);
    return {
      book: paddedBook,
      chapter: paddedChapter,
      verseRanges
    };
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error("Invalid format");
  }
}

// src/utils/formatJWLibraryLink.ts
function formatJWLibraryLink(reference, language) {
  const { book, chapter, verseRanges } = reference;
  if (!verseRanges) {
    throw new Error("Invalid reference format");
  }
  const link = (range) => `jwlibrary:///finder?bible=${range}${language ? `&wtlocale=${language}` : ""}`;
  if (verseRanges.length === 1) {
    const { start, end } = verseRanges[0];
    const baseReference = `${book}${chapter}${start}`;
    if (start === end) {
      return link(baseReference);
    }
    return link(`${baseReference}-${book}${chapter}${end}`);
  }
  return verseRanges.map(({ start, end }) => {
    const baseReference = `${book}${chapter}${start}`;
    if (start === end) {
      return link(baseReference);
    }
    return link(`${baseReference}-${book}${chapter}${end}`);
  });
}

// src/utils/formatBibleText.ts
function formatBibleText(input, short = false, language) {
  try {
    const reference = parseBibleReference(input, language);
    const bookEntry = getBibleBooks(language).find((book) => book.id === parseInt(reference.book));
    if (!bookEntry) {
      return input;
    }
    const bookName = short ? bookEntry.shortName : bookEntry.longName;
    const verseRefs = reference.verseRanges.map((range) => {
      const start = parseInt(range.start);
      const end = parseInt(range.end);
      return start === end ? start.toString() : `${start}-${end}`;
    });
    return `${bookName} ${parseInt(reference.chapter)}:${verseRefs.join(",")}`;
  } catch (error) {
    return input;
  }
}

// src/utils/convertBibleTextToLink.ts
function convertBibleTextToLink(input, language) {
  try {
    const reference = parseBibleReference(input, language);
    return formatJWLibraryLink(reference, language);
  } catch (error) {
    console.error("Error converting Bible text:", error.message);
    return input;
  }
}
function convertBibleTextToMarkdownLink(input, short = false, language) {
  try {
    const reference = parseBibleReference(input, language);
    const links = formatJWLibraryLink(reference, language);
    if (!links || Array.isArray(links) && !links.length) {
      return input;
    }
    if (Array.isArray(links)) {
      const bookEntry = getBibleBooks(language).find(
        (book) => book.id === parseInt(reference.book)
      );
      if (!bookEntry) {
        return input;
      }
      const bookName = short ? bookEntry.shortName : bookEntry.longName;
      const chapter = parseInt(reference.chapter);
      const verseRanges = reference.verseRanges.map((range) => {
        const start = parseInt(range.start);
        const end = parseInt(range.end);
        return start === end ? start.toString() : `${start}-${end}`;
      });
      return verseRanges.map((range, i) => {
        if (i === 0) {
          return `[${bookName} ${chapter}:${range}](${links[i]})`;
        }
        return `[${range}](${links[i]})`;
      }).join(",");
    }
    const formattedText = formatBibleText(input, short, language);
    return `[${formattedText}](${links})`;
  } catch (error) {
    return input;
  }
}

// src/locale/en.ts
var en = {
  settings: {
    language: {
      name: "Language",
      description: "Select the language for the plugin interface and Bible references"
    },
    useShortNames: {
      name: "Use short names in Bible links",
      description: 'When enabled, Bible references will use abbreviated book names (e.g., "1Pe" instead of "1. Peter")'
    }
  },
  commands: {
    replaceLinks: "Convert all links",
    replaceBibleLinks: "Convert Bible verse links",
    replacePublicationLinks: "Convert publication links",
    convertBibleReference: "Convert Bible reference to Library link"
  },
  notices: {
    multipleBooksFound: "Multiple Bible books found: {{books}}"
  },
  suggestions: {
    createLink: "Create link: {{text}}",
    createLinks: "Create links: {{text}}",
    createAndOpen: "Create and open: {{text}}",
    createAndOpenVerse: "Create and open: {{verse}}"
  }
};

// src/locale/de.ts
var de = {
  settings: {
    language: {
      name: "Sprache",
      description: "W\xE4hle die Sprache f\xFCr die Plugin-Oberfl\xE4che und Bibelverweise"
    },
    useShortNames: {
      name: "Kurznamen in Bibelverweisen verwenden",
      description: 'Wenn aktiviert, werden Bibelverweise mit abgek\xFCrzten Buchnamen angezeigt (z.B. "1Pe" statt "1. Petrus")'
    }
  },
  commands: {
    replaceLinks: "Alle Links umwandeln",
    replaceBibleLinks: "Bibelvers-Links umwandeln",
    replacePublicationLinks: "Publikations-Links umwandeln",
    convertBibleReference: "Bibelstelle in JW Library-Link umwandeln"
  },
  notices: {
    multipleBooksFound: "Mehrere Bibelb\xFCcher gefunden: {{books}}"
  },
  suggestions: {
    createLink: "Link erstellen: {{text}}",
    createLinks: "Links erstellen: {{text}}",
    createAndOpen: "Erstellen und \xF6ffnen: {{text}}",
    createAndOpenVerse: "Erstellen und \xF6ffnen: {{verse}}"
  }
};

// src/services/TranslationService.ts
var TranslationService = class _TranslationService {
  constructor() {
    this.currentLocale = "en";
    this.translations = {
      en,
      de
    };
    try {
      if (typeof window !== "undefined" && window.localStorage) {
        const obsidianLocale = window.localStorage.getItem("language");
        if (obsidianLocale === "en" || obsidianLocale === "de") {
          this.currentLocale = obsidianLocale;
        }
      }
    } catch (e) {
      console.debug("Could not access localStorage, using default locale");
    }
  }
  static getInstance() {
    if (!_TranslationService.instance) {
      _TranslationService.instance = new _TranslationService();
    }
    return _TranslationService.instance;
  }
  setLocale(locale) {
    this.currentLocale = locale;
  }
  getCurrentLocale() {
    return this.currentLocale;
  }
  t(key, variables = {}) {
    const keys = key.split(".");
    let value = this.translations[this.currentLocale];
    for (const k of keys) {
      if (value && typeof value === "object" && k in value) {
        value = value[k];
      } else {
        console.warn(`Translation key not found: ${key}`);
        return key;
      }
    }
    if (typeof value === "string") {
      return this.replaceVariables(value, variables);
    }
    return key;
  }
  replaceVariables(text, variables) {
    return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return variables[key] || match;
    });
  }
};

// src/main.ts
var matchingBibleReferenceRegex = /^(?:[1-5]?[A-Za-zäöü]{1,4}\s*\d+:\d+(?:-\d+)?(?:\s*,\s*\d+(?:-\d+)?)*\s*,?\s*)?$/i;
var DEFAULT_SETTINGS = {
  useShortNames: false,
  language: "E"
};
var BibleReferenceSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const commandIndex = subString.lastIndexOf("/b");
    if (commandIndex === -1) return null;
    const afterCommand = subString.slice(commandIndex + 2).trim();
    const match = afterCommand.match(matchingBibleReferenceRegex);
    if (!match) return null;
    return {
      start: {
        ch: commandIndex,
        // Start from the /b
        line: cursor.line
      },
      end: cursor,
      query: afterCommand
    };
  }
  getSuggestions(context) {
    const query = context.query;
    if (query.match(matchingBibleReferenceRegex)) {
      const formattedText = formatBibleText(query, true, this.plugin.settings.language);
      let reference;
      try {
        reference = parseBibleReference(query, this.plugin.settings.language);
      } catch (e) {
        return [];
      }
      const links = formatJWLibraryLink(reference, this.plugin.settings.language);
      const hasMultipleLinks = Array.isArray(links) && links.length > 1;
      const suggestions = [
        {
          text: query,
          command: "link",
          description: hasMultipleLinks ? this.t("suggestions.createLinks", { text: formattedText }) : this.t("suggestions.createLink", { text: formattedText })
        }
      ];
      if (hasMultipleLinks) {
        const verseRanges = reference.verseRanges.map((range) => {
          const start = parseInt(range.start);
          const end = parseInt(range.end);
          return start === end ? start.toString() : `${start}-${end}`;
        });
        verseRanges.forEach((range, i) => {
          suggestions.push({
            text: query,
            command: "open",
            description: this.t("suggestions.createAndOpenVerse", { verse: range }),
            linkIndex: i
          });
        });
      } else {
        suggestions.push({
          text: query,
          command: "open",
          description: this.t("suggestions.createAndOpen", { text: formattedText })
        });
      }
      return suggestions;
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.description);
  }
  selectSuggestion(suggestion) {
    if (!this.context) return;
    const { context } = this;
    const editor = context.editor;
    const convertedLink = convertBibleTextToMarkdownLink(
      suggestion.text,
      this.plugin.settings.useShortNames,
      this.plugin.settings.language
    );
    editor.replaceRange(convertedLink, context.start, context.end);
    if (suggestion.command === "open") {
      const url = convertBibleTextToLink(suggestion.text, this.plugin.settings.language);
      if (Array.isArray(url)) {
        window.open(url[suggestion.linkIndex || 0]);
      } else {
        window.open(url);
      }
    }
  }
};
var LibraryLinkerPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "replace-links",
      name: this.t("commands.replaceLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "all");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-bible-links",
      name: this.t("commands.replaceBibleLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "bible");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-publication-links",
      name: this.t("commands.replacePublicationLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "publication");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "convert-bible-text",
      name: this.t("commands.convertBibleReference"),
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        if (selection) {
          const convertedLink = convertBibleTextToMarkdownLink(
            selection,
            this.settings.useShortNames,
            this.settings.language
          );
          editor.replaceSelection(convertedLink);
        }
      }
    });
    this.addSettingTab(new LinkReplacerSettingTab(this.app, this));
    this.bibleSuggester = new BibleReferenceSuggester(this);
    this.registerEditorSuggest(this.bibleSuggester);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkReplacerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName(this.t("settings.language.name")).setDesc(this.t("settings.language.description")).addDropdown(
      (dropdown) => dropdown.addOptions({
        E: "English",
        X: "Deutsch"
      }).setValue(this.plugin.settings.language).onChange(async (value) => {
        this.plugin.settings.language = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName(this.t("settings.useShortNames.name")).setDesc(this.t("settings.useShortNames.description")).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useShortNames).onChange(async (value) => {
        this.plugin.settings.useShortNames = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
