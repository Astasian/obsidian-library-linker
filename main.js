/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JWLibraryLinkerPlugin,
  matchingBibleReferenceRegex: () => matchingBibleReferenceRegex
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/utils/convertBibleReference.ts
function convertBibleReference(url) {
  url = url.replace("jwpub://", "jwlibrary://");
  const parts = url.split("/");
  const bibleRef = parts[parts.length - 1];
  const [startBookChapterVerse, endBookChapterVerse] = bibleRef.split("-");
  const [bookStart, chapterStart, verseStart] = startBookChapterVerse.split(":");
  const [bookEnd, chapterEnd, verseEnd] = endBookChapterVerse.split(":");
  const formattedChapterStart = chapterStart.padStart(3, "0");
  const formattedVerseStart = verseStart.padStart(3, "0");
  const formattedChapterEnd = chapterEnd.padStart(3, "0");
  const formattedVerseEnd = verseEnd.padStart(3, "0");
  const formattedReferenceStart = `${bookStart}${formattedChapterStart}${formattedVerseStart}`;
  const formattedReferenceEnd = `${bookEnd}${formattedChapterEnd}${formattedVerseEnd}`;
  const formattedReference = formattedReferenceStart === formattedReferenceEnd ? formattedReferenceStart : `${formattedReferenceStart}-${formattedReferenceEnd}`;
  return `jwlibrary:///finder?bible=${formattedReference}`;
}

// src/utils/convertPublicationReference.ts
function convertPublicationReference(url) {
  const parts = url.split("/");
  const pubRef = parts[3];
  const [locale, docId] = pubRef.split(":");
  const paragraph = parts[4];
  return `jwlibrary:///finder?wtlocale=${locale}&docid=${docId}&par=${paragraph}`;
}

// src/utils/convertLinks.ts
function convertLinks(content, type = "all") {
  const wikiLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
  return content.replace(wikiLinkRegex, (match, text, url) => {
    if (url.startsWith("jwpub://b/") && (type === "bible" || type === "all")) {
      return `[${text}](${convertBibleReference(url)})`;
    }
    if (url.startsWith("jwpub://p/") && (type === "publication" || type === "all")) {
      return `[${text}](${convertPublicationReference(url)})`;
    }
    return match;
  });
}

// src/bibleBooks/de.ts
var bibleBooksDE = [
  {
    id: 1,
    prefix: "1",
    aliases: ["mose"],
    longName: "1. Mose",
    shortName: "1Mo"
  },
  {
    id: 2,
    prefix: "2",
    aliases: ["mose"],
    longName: "2. Mose",
    shortName: "2Mo"
  },
  {
    id: 3,
    prefix: "3",
    aliases: ["mose"],
    longName: "3. Mose",
    shortName: "3Mo"
  },
  {
    id: 4,
    prefix: "4",
    aliases: ["mose"],
    longName: "4. Mose",
    shortName: "4Mo"
  },
  {
    id: 5,
    prefix: "5",
    aliases: ["mose"],
    longName: "5. Mose",
    shortName: "5Mo"
  },
  {
    id: 6,
    aliases: ["josua"],
    longName: "Josua",
    shortName: "Jos"
  },
  {
    id: 7,
    aliases: ["richter"],
    longName: "Richter",
    shortName: "Ri"
  },
  {
    id: 8,
    aliases: ["ruth"],
    longName: "Ruth",
    shortName: "Ru"
  },
  {
    id: 9,
    prefix: "1",
    aliases: ["samuel"],
    longName: "1. Samuel",
    shortName: "1Sa"
  },
  {
    id: 10,
    prefix: "2",
    aliases: ["samuel"],
    longName: "2. Samuel",
    shortName: "2Sa"
  },
  {
    id: 11,
    prefix: "1",
    aliases: ["k\xF6nige", "koenige"],
    longName: "1. K\xF6nige",
    shortName: "1K\xF6"
  },
  {
    id: 12,
    prefix: "2",
    aliases: ["k\xF6nige", "koenige"],
    longName: "2. K\xF6nige",
    shortName: "2K\xF6"
  },
  {
    id: 13,
    prefix: "1",
    aliases: ["chronika"],
    longName: "1. Chronika",
    shortName: "1Ch"
  },
  {
    id: 14,
    prefix: "2",
    aliases: ["chronika"],
    longName: "2. Chronika",
    shortName: "2Ch"
  },
  {
    id: 15,
    aliases: ["esra"],
    longName: "Esra",
    shortName: "Esr"
  },
  {
    id: 16,
    aliases: ["nehemia"],
    longName: "Nehemia",
    shortName: "Ne"
  },
  {
    id: 17,
    aliases: ["esther"],
    longName: "Esther",
    shortName: "Est"
  },
  {
    id: 18,
    aliases: ["hiob"],
    longName: "Hiob",
    shortName: "Hi"
  },
  {
    id: 19,
    aliases: ["psalm"],
    longName: "Psalm",
    shortName: "Ps"
  },
  {
    id: 20,
    aliases: ["spr\xFCche", "sprueche"],
    longName: "Spr\xFCche",
    shortName: "Spr"
  },
  {
    id: 21,
    aliases: ["prediger"],
    longName: "Prediger",
    shortName: "Pr"
  },
  {
    id: 22,
    aliases: ["hoheslied", "hohes lied"],
    longName: "Hohes Lied",
    shortName: "Hoh"
  },
  {
    id: 23,
    aliases: ["jesaja"],
    longName: "Jesaja",
    shortName: "Jes"
  },
  {
    id: 24,
    aliases: ["jeremia"],
    longName: "Jeremia",
    shortName: "Jer"
  },
  {
    id: 25,
    aliases: ["klagelieder"],
    longName: "Klagelieder",
    shortName: "Klg"
  },
  {
    id: 26,
    aliases: ["hesekiel"],
    longName: "Hesekiel",
    shortName: "Hes"
  },
  {
    id: 27,
    aliases: ["daniel"],
    longName: "Daniel",
    shortName: "Da"
  },
  {
    id: 28,
    aliases: ["hosea"],
    longName: "Hosea",
    shortName: "Hos"
  },
  {
    id: 29,
    aliases: ["joel"],
    longName: "Joel",
    shortName: "Joel"
  },
  {
    id: 30,
    aliases: ["amos"],
    longName: "Amos",
    shortName: "Am"
  },
  {
    id: 31,
    aliases: ["obadja"],
    longName: "Obadja",
    shortName: "Ob"
  },
  {
    id: 32,
    aliases: ["jona"],
    longName: "Jona",
    shortName: "Jon"
  },
  {
    id: 33,
    aliases: ["micha"],
    longName: "Micha",
    shortName: "Mi"
  },
  {
    id: 34,
    aliases: ["nahum"],
    longName: "Nahum",
    shortName: "Nah"
  },
  {
    id: 35,
    aliases: ["habakuk"],
    longName: "Habakuk",
    shortName: "Hab"
  },
  {
    id: 36,
    aliases: ["zephanja", "zefanja"],
    longName: "Zephanja",
    shortName: "Ze"
  },
  {
    id: 37,
    aliases: ["haggai"],
    longName: "Haggai",
    shortName: "Hag"
  },
  {
    id: 38,
    aliases: ["sacharja"],
    longName: "Sacharja",
    shortName: "Sach"
  },
  {
    id: 39,
    aliases: ["maleachi"],
    longName: "Maleachi",
    shortName: "Mal"
  },
  {
    id: 40,
    aliases: ["matth\xE4us", "matthaeus", "mtt"],
    longName: "Matth\xE4us",
    shortName: "Mat"
  },
  {
    id: 41,
    aliases: ["markus"],
    longName: "Markus",
    shortName: "Mar"
  },
  {
    id: 42,
    aliases: ["lukas"],
    longName: "Lukas",
    shortName: "Luk"
  },
  {
    id: 43,
    aliases: ["johannes"],
    longName: "Johannes",
    shortName: "Joh"
  },
  {
    id: 44,
    aliases: ["apostelgeschichte", "apg"],
    longName: "Apostelgeschichte",
    shortName: "Apg"
  },
  {
    id: 45,
    aliases: ["r\xF6mer", "roemer"],
    longName: "R\xF6mer",
    shortName: "R\xF6"
  },
  {
    id: 46,
    prefix: "1",
    aliases: ["korinther"],
    longName: "1. Korinther",
    shortName: "1Ko"
  },
  {
    id: 47,
    prefix: "2",
    aliases: ["korinther"],
    longName: "2. Korinther",
    shortName: "2Ko"
  },
  {
    id: 48,
    aliases: ["galater"],
    longName: "Galater",
    shortName: "Gal"
  },
  {
    id: 49,
    aliases: ["epheser"],
    longName: "Epheser",
    shortName: "Eph"
  },
  {
    id: 50,
    aliases: ["philipper"],
    longName: "Philipper",
    shortName: "Phil"
  },
  {
    id: 51,
    aliases: ["kolosser"],
    longName: "Kolosser",
    shortName: "Kol"
  },
  {
    id: 52,
    prefix: "1",
    aliases: ["thessalonicher"],
    longName: "1. Thessalonicher",
    shortName: "1Th"
  },
  {
    id: 53,
    prefix: "2",
    aliases: ["thessalonicher"],
    longName: "2. Thessalonicher",
    shortName: "2Th"
  },
  {
    id: 54,
    prefix: "1",
    aliases: ["timotheus"],
    longName: "1. Timotheus",
    shortName: "1Ti"
  },
  {
    id: 55,
    prefix: "2",
    aliases: ["timotheus"],
    longName: "2. Timotheus",
    shortName: "2Ti"
  },
  {
    id: 56,
    aliases: ["titus"],
    longName: "Titus",
    shortName: "Tit"
  },
  {
    id: 57,
    aliases: ["philemon", "phlm", "phm"],
    longName: "Philemon",
    shortName: "Phm"
  },
  {
    id: 58,
    aliases: ["hebr\xE4er", "hebraeer"],
    longName: "Hebr\xE4er",
    shortName: "Heb"
  },
  {
    id: 59,
    aliases: ["jakobus"],
    longName: "Jakobus",
    shortName: "Jak"
  },
  {
    id: 60,
    prefix: "1",
    aliases: ["petrus"],
    longName: "1. Petrus",
    shortName: "1Pe"
  },
  {
    id: 61,
    prefix: "2",
    aliases: ["petrus"],
    longName: "2. Petrus",
    shortName: "2Pe"
  },
  {
    id: 62,
    prefix: "1",
    aliases: ["johannes"],
    longName: "1. Johannes",
    shortName: "1Jo"
  },
  {
    id: 63,
    prefix: "2",
    aliases: ["johannes"],
    longName: "2. Johannes",
    shortName: "2Jo"
  },
  {
    id: 64,
    prefix: "3",
    aliases: ["johannes"],
    longName: "3. Johannes",
    shortName: "3Jo"
  },
  {
    id: 65,
    aliases: ["judas"],
    longName: "Judas",
    shortName: "Jud"
  },
  {
    id: 66,
    aliases: ["offenbarung", "offb"],
    longName: "Offenbarung",
    shortName: "Off"
  }
];

// src/bibleBooks/en.ts
var bibleBooksEN = [
  {
    id: 1,
    aliases: ["genesis"],
    longName: "Genesis",
    shortName: "Ge"
  },
  {
    id: 2,
    aliases: ["exodus"],
    longName: "Exodus",
    shortName: "Ex"
  },
  {
    id: 3,
    aliases: ["leviticus"],
    longName: "Leviticus",
    shortName: "Le"
  },
  {
    id: 4,
    aliases: ["numbers"],
    longName: "Numbers",
    shortName: "Nu"
  },
  {
    id: 5,
    aliases: ["deuteronomy"],
    longName: "Deuteronomy",
    shortName: "De"
  },
  {
    id: 6,
    aliases: ["joshua"],
    longName: "Joshua",
    shortName: "Jos"
  },
  {
    id: 7,
    aliases: ["judges", "jg"],
    longName: "Judges",
    shortName: "Jg"
  },
  {
    id: 8,
    aliases: ["ruth"],
    longName: "Ruth",
    shortName: "Ru"
  },
  {
    id: 9,
    prefix: "1",
    aliases: ["samuel"],
    longName: "1 Samuel",
    shortName: "1Sa"
  },
  {
    id: 10,
    prefix: "2",
    aliases: ["samuel"],
    longName: "2 Samuel",
    shortName: "2Sa"
  },
  {
    id: 11,
    prefix: "1",
    aliases: ["kings"],
    longName: "1 Kings",
    shortName: "1Ki"
  },
  {
    id: 12,
    prefix: "2",
    aliases: ["kings"],
    longName: "2 Kings",
    shortName: "2Ki"
  },
  {
    id: 13,
    prefix: "1",
    aliases: ["chronicles"],
    longName: "1 Chronicles",
    shortName: "1Ch"
  },
  {
    id: 14,
    prefix: "2",
    aliases: ["chronicles"],
    longName: "2 Chronicles",
    shortName: "2Ch"
  },
  {
    id: 15,
    aliases: ["ezra"],
    longName: "Ezra",
    shortName: "Ezr"
  },
  {
    id: 16,
    aliases: ["nehemiah"],
    longName: "Nehemiah",
    shortName: "Ne"
  },
  {
    id: 17,
    aliases: ["esther"],
    longName: "Esther",
    shortName: "Es"
  },
  {
    id: 18,
    aliases: ["job"],
    longName: "Job",
    shortName: "Job"
  },
  {
    id: 19,
    aliases: ["psalms"],
    longName: "Psalms",
    shortName: "Ps"
  },
  {
    id: 20,
    aliases: ["proverbs"],
    longName: "Proverbs",
    shortName: "Pr"
  },
  {
    id: 21,
    aliases: ["ecclesiastes"],
    longName: "Ecclesiastes",
    shortName: "Ec"
  },
  {
    id: 22,
    aliases: ["can", "songofsolomon", "songofsongs"],
    longName: "Song of Solomon",
    shortName: "Ca"
  },
  {
    id: 23,
    aliases: ["isaiah"],
    longName: "Isaiah",
    shortName: "Isa"
  },
  {
    id: 24,
    aliases: ["jeremiah"],
    longName: "Jeremiah",
    shortName: "Jer"
  },
  {
    id: 25,
    aliases: ["lamentations"],
    longName: "Lamentations",
    shortName: "La"
  },
  {
    id: 26,
    aliases: ["ezekiel"],
    longName: "Ezekiel",
    shortName: "Eze"
  },
  {
    id: 27,
    aliases: ["daniel"],
    longName: "Daniel",
    shortName: "Da"
  },
  {
    id: 28,
    aliases: ["hosea"],
    longName: "Hosea",
    shortName: "Ho"
  },
  {
    id: 29,
    aliases: ["joel"],
    longName: "Joel",
    shortName: "Joe"
  },
  {
    id: 30,
    aliases: ["amos"],
    longName: "Amos",
    shortName: "Am"
  },
  {
    id: 31,
    aliases: ["obadiah"],
    longName: "Obadiah",
    shortName: "Ob"
  },
  {
    id: 32,
    aliases: ["jonah", "jnh"],
    longName: "Jonah",
    shortName: "Jon"
  },
  {
    id: 33,
    aliases: ["micah"],
    longName: "Micah",
    shortName: "Mic"
  },
  {
    id: 34,
    aliases: ["nahum"],
    longName: "Nahum",
    shortName: "Na"
  },
  {
    id: 35,
    aliases: ["habakkuk"],
    longName: "Habakkuk",
    shortName: "Hab"
  },
  {
    id: 36,
    aliases: ["zephaniah"],
    longName: "Zephaniah",
    shortName: "Zep"
  },
  {
    id: 37,
    aliases: ["haggai"],
    longName: "Haggai",
    shortName: "Hag"
  },
  {
    id: 38,
    aliases: ["zechariah"],
    longName: "Zechariah",
    shortName: "Zec"
  },
  {
    id: 39,
    aliases: ["malachi"],
    longName: "Malachi",
    shortName: "Mal"
  },
  {
    id: 40,
    aliases: ["matthew", "mt"],
    longName: "Matthew",
    shortName: "Mt"
  },
  {
    id: 41,
    aliases: ["mark", "mr"],
    longName: "Mark",
    shortName: "Mr"
  },
  {
    id: 42,
    aliases: ["luke"],
    longName: "Luke",
    shortName: "Lu"
  },
  {
    id: 43,
    aliases: ["john"],
    longName: "John",
    shortName: "Joh"
  },
  {
    id: 44,
    aliases: ["acts"],
    longName: "Acts",
    shortName: "Ac"
  },
  {
    id: 45,
    aliases: ["romans"],
    longName: "Romans",
    shortName: "Ro"
  },
  {
    id: 46,
    prefix: "1",
    aliases: ["corinthians"],
    longName: "1 Corinthians",
    shortName: "1Co"
  },
  {
    id: 47,
    prefix: "2",
    aliases: ["corinthians"],
    longName: "2 Corinthians",
    shortName: "2Co"
  },
  {
    id: 48,
    aliases: ["galatians"],
    longName: "Galatians",
    shortName: "Ga"
  },
  {
    id: 49,
    aliases: ["ephesians"],
    longName: "Ephesians",
    shortName: "Eph"
  },
  {
    id: 50,
    aliases: ["philippians", "php"],
    longName: "Philippians",
    shortName: "Php"
  },
  {
    id: 51,
    aliases: ["colossians"],
    longName: "Colossians",
    shortName: "Col"
  },
  {
    id: 52,
    prefix: "1",
    aliases: ["thessalonians"],
    longName: "1 Thessalonians",
    shortName: "1Th"
  },
  {
    id: 53,
    prefix: "2",
    aliases: ["thessalonians"],
    longName: "2 Thessalonians",
    shortName: "2Th"
  },
  {
    id: 54,
    prefix: "1",
    aliases: ["timothy"],
    longName: "1 Timothy",
    shortName: "1Ti"
  },
  {
    id: 55,
    prefix: "2",
    aliases: ["timothy"],
    longName: "2 Timothy",
    shortName: "2Ti"
  },
  {
    id: 56,
    aliases: ["titus"],
    longName: "Titus",
    shortName: "Tit"
  },
  {
    id: 57,
    aliases: ["philemon", "phm"],
    longName: "Philemon",
    shortName: "Phm"
  },
  {
    id: 58,
    aliases: ["hebrews"],
    longName: "Hebrews",
    shortName: "Heb"
  },
  {
    id: 59,
    aliases: ["james", "jas"],
    longName: "James",
    shortName: "Jas"
  },
  {
    id: 60,
    prefix: "1",
    aliases: ["peter"],
    longName: "1 Peter",
    shortName: "1Pe"
  },
  {
    id: 61,
    prefix: "2",
    aliases: ["peter"],
    longName: "2 Peter",
    shortName: "2Pe"
  },
  {
    id: 62,
    prefix: "1",
    aliases: ["john"],
    longName: "1 John",
    shortName: "1Jo"
  },
  {
    id: 63,
    prefix: "2",
    aliases: ["john"],
    longName: "2 John",
    shortName: "2Jo"
  },
  {
    id: 64,
    prefix: "3",
    aliases: ["john"],
    longName: "3 John",
    shortName: "3Jo"
  },
  {
    id: 65,
    aliases: ["jude"],
    longName: "Jude",
    shortName: "Jude"
  },
  {
    id: 66,
    aliases: ["revelation"],
    longName: "Revelation",
    shortName: "Re"
  }
];

// src/bibleBooks/index.ts
var import_obsidian = require("obsidian");

// src/locale/en.ts
var en = {
  settings: {
    language: {
      name: "Language",
      description: "Select the language for Bible references"
    },
    useShortNames: {
      name: "Use short names in Bible links",
      description: 'When enabled, Bible references will use abbreviated book names (e.g., "1Pe" instead of "1. Peter")'
    }
  },
  commands: {
    replaceLinks: "Convert all links",
    replaceBibleLinks: "Convert Bible verse links",
    replacePublicationLinks: "Convert publication links",
    convertBibleReference: "Convert Bible reference to Library link"
  },
  notices: {
    multipleBooksFound: "Multiple Bible books found: {{books}}"
  },
  suggestions: {
    createLink: "Create link: {{text}}",
    createLinks: "Create links: {{text}}",
    createAndOpen: "Create link and open: {{text}}",
    createAndOpenVerse: "Create link and open: {{verse}}",
    typing: "Enter Bible reference: {{text}}",
    typingEmpty: "Enter Bible reference"
  },
  errors: {
    multipleBooksFound: "Multiple Bible books found: {{books}}",
    bookNotFound: "Bible book not found: {{book}}",
    invalidVerseNumber: "Invalid verse number",
    versesAscendingOrder: "Verses must be in ascending order",
    invalidVerseFormat: "Invalid verse format",
    invalidReferenceFormat: "Invalid reference format",
    conversionError: "Error converting Bible text: {{message}}",
    unsupportedLanguage: "Unsupported language: {{language}}"
  }
};

// src/locale/de.ts
var de = {
  settings: {
    language: {
      name: "Sprache",
      description: "W\xE4hle die Sprache f\xFCr die Bibelverweise"
    },
    useShortNames: {
      name: "Kurznamen in Bibelverweisen verwenden",
      description: 'Wenn aktiviert, werden Bibelverweise mit abgek\xFCrzten Buchnamen angezeigt (z.B. "1Pe" statt "1. Petrus")'
    }
  },
  commands: {
    replaceLinks: "Alle Links umwandeln",
    replaceBibleLinks: "Bibelvers-Links umwandeln",
    replacePublicationLinks: "Publikations-Links umwandeln",
    convertBibleReference: "Bibelverweis in JW Library-Link umwandeln"
  },
  notices: {
    multipleBooksFound: "Mehrere Bibelb\xFCcher gefunden: {{books}}"
  },
  suggestions: {
    createLink: "Link erstellen: {{text}}",
    createLinks: "Links erstellen: {{text}}",
    createAndOpen: "Link erstellen und \xF6ffnen: {{text}}",
    createAndOpenVerse: "Link erstellen und \xF6ffnen: {{verse}}",
    typing: "Bibelverweis eingeben: {{text}}",
    typingEmpty: "Bibelverweis eingeben"
  },
  errors: {
    multipleBooksFound: "Mehrere Bibelb\xFCcher gefunden: {{books}}",
    bookNotFound: "Bibelbuch nicht gefunden: {{book}}",
    invalidVerseNumber: "Ung\xFCltige Versnummer",
    versesAscendingOrder: "Verse m\xFCssen in aufsteigender Reihenfolge sein",
    invalidVerseFormat: "Ung\xFCltiges Versformat",
    invalidReferenceFormat: "Ung\xFCltiges Referenzformat",
    conversionError: "Fehler beim Konvertieren des Bibeltextes: {{message}}",
    unsupportedLanguage: "Nicht unterst\xFCtzte Sprache: {{language}}"
  }
};

// src/services/TranslationService.ts
var TranslationService = class _TranslationService {
  constructor() {
    this.currentLocale = "en";
    this.translations = {
      en,
      de
    };
    try {
      if (typeof window !== "undefined" && window.localStorage) {
        const obsidianLocale = window.localStorage.getItem("language");
        if (obsidianLocale === "en" || obsidianLocale === "de") {
          this.currentLocale = obsidianLocale;
        }
      }
    } catch (e) {
      console.debug("Could not access localStorage, using default locale");
    }
  }
  static getInstance() {
    if (!_TranslationService.instance) {
      _TranslationService.instance = new _TranslationService();
    }
    return _TranslationService.instance;
  }
  setLocale(locale) {
    this.currentLocale = locale;
  }
  getCurrentLocale() {
    return this.currentLocale;
  }
  t(key, variables = {}) {
    const keys = key.split(".");
    let value = this.translations[this.currentLocale];
    for (const k of keys) {
      if (value && typeof value === "object" && k in value) {
        value = value[k];
      } else {
        console.warn(`Translation key not found: ${key}`);
        return key;
      }
    }
    if (typeof value === "string") {
      return this.replaceVariables(value, variables);
    }
    return key;
  }
  replaceVariables(text, variables) {
    return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return variables[key] || match;
    });
  }
};

// src/bibleBooks/index.ts
var getBibleBooks = (language) => {
  const t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
  switch (language) {
    case "E":
      return bibleBooksEN;
    case "X":
      return bibleBooksDE;
    default:
      new import_obsidian.Notice(t("errors.unsupportedLanguage", { language }));
      return null;
  }
};

// src/utils/findBook.ts
var findBook = (bookQuery, language) => {
  const t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
  bookQuery = bookQuery.toLowerCase().replace(/[/.\s]/g, "").trim();
  const bibleBooks = getBibleBooks(language);
  if (!bibleBooks) {
    return { book: null };
  }
  const bookEntries = bibleBooks.filter((book) => !book.prefix ? true : bookQuery.match(/^[1-5]/)).filter((book) => {
    const alias = book.aliases.map((alias2) => book.prefix ? `${book.prefix}${alias2}` : alias2);
    return alias.some((alias2) => alias2.includes(bookQuery));
  });
  if (bookEntries.length > 1) {
    return {
      book: null,
      notification: t("errors.multipleBooksFound", {
        books: bookEntries.map((book) => book.longName).join(", ")
      })
    };
  }
  if (bookEntries.length === 1) {
    return { book: bookEntries[0] };
  }
  return {
    book: null,
    notification: t("errors.bookNotFound")
  };
};

// src/utils/parseBibleReference.ts
function parseVerseNumber(verse) {
  const num = parseInt(verse, 10);
  if (isNaN(num) || num < 1) {
    throw new Error("errors.invalidVerseFormat");
  }
  return num;
}
function padVerse(verse) {
  return verse.toString().padStart(3, "0");
}
function parseVerseRanges(versePart) {
  versePart = versePart.trim();
  if (versePart.endsWith(",")) {
    versePart = versePart.slice(0, -1);
  }
  const parts = versePart.split(",").map((p) => p.trim()).filter((p) => p.length > 0);
  if (parts.length !== versePart.split(",").length) {
    throw new Error("errors.invalidVerseFormat");
  }
  const ranges = [];
  let lastEndVerse = 0;
  let currentRange = null;
  for (const part of parts) {
    if ((part.match(/-/g) || []).length > 1 || part.includes("--")) {
      throw new Error("errors.invalidVerseFormat");
    }
    if (part.includes("-")) {
      const start = parseVerseNumber(part.split("-")[0]);
      const end = parseVerseNumber(part.split("-")[1]);
      if (start >= end) {
        throw new Error("errors.versesAscendingOrder");
      }
      if (start <= lastEndVerse) {
        throw new Error("errors.versesAscendingOrder");
      }
      if (currentRange && start === lastEndVerse + 1) {
        currentRange.end = padVerse(end);
      } else {
        currentRange = {
          start: padVerse(start),
          end: padVerse(end)
        };
        ranges.push(currentRange);
      }
      lastEndVerse = end;
    } else {
      const verse = parseVerseNumber(part);
      if (verse <= lastEndVerse) {
        throw new Error("errors.versesAscendingOrder");
      }
      if (currentRange && verse === lastEndVerse + 1) {
        currentRange.end = padVerse(verse);
      } else {
        currentRange = {
          start: padVerse(verse),
          end: padVerse(verse)
        };
        ranges.push(currentRange);
      }
      lastEndVerse = verse;
    }
  }
  return ranges;
}
function parseBibleReference(input, language) {
  input = input.trim().toLowerCase();
  const match = input.match(/^([a-z0-9äöüß]+?)\s*(\d+)\s*:\s*(.+)$/i);
  if (!match) {
    throw new Error("errors.invalidFormat");
  }
  const [, bookName, chapter, versesPart] = match;
  const bookResult = findBook(bookName, language);
  if (!bookResult.book) {
    throw new Error("errors.bookNotFound");
  }
  const book = bookResult.book;
  const paddedBook = book.id < 10 ? `0${book.id}` : book.id.toString();
  const paddedChapter = chapter.padStart(3, "0");
  const versesPartMatch = versesPart.match(/^(\d+)(?:-(\d*))?$/);
  if (versesPartMatch) {
    const [, startVerse, endVerse] = versesPartMatch;
    const startVerseNumber = parseVerseNumber(startVerse);
    if (endVerse) {
      const endVerseNumber = parseVerseNumber(endVerse);
      if (startVerseNumber >= endVerseNumber) {
        throw new Error("errors.versesAscendingOrder");
      }
      return {
        book: paddedBook,
        chapter: paddedChapter,
        verseRanges: [
          {
            start: padVerse(startVerseNumber),
            end: padVerse(endVerseNumber)
          }
        ]
      };
    }
    return {
      book: paddedBook,
      chapter: paddedChapter,
      verseRanges: [
        {
          start: padVerse(startVerseNumber),
          end: padVerse(startVerseNumber)
        }
      ]
    };
  }
  const result = parseVerseRanges(versesPart);
  return {
    book: paddedBook,
    chapter: paddedChapter,
    verseRanges: result
  };
}

// src/utils/formatJWLibraryLink.ts
function formatJWLibraryLink(reference, language) {
  const { book, chapter, verseRanges } = reference;
  if (!verseRanges) {
    throw new Error("errors.invalidReferenceFormat");
  }
  const link = (range) => `jwlibrary:///finder?bible=${range}${language ? `&wtlocale=${language}` : ""}`;
  if (verseRanges.length === 1) {
    const { start, end } = verseRanges[0];
    const baseReference = `${book}${chapter}${start}`;
    if (start === end) {
      return link(baseReference);
    }
    return link(`${baseReference}-${book}${chapter}${end}`);
  }
  return verseRanges.map(({ start, end }) => {
    const baseReference = `${book}${chapter}${start}`;
    if (start === end) {
      return link(baseReference);
    }
    return link(`${baseReference}-${book}${chapter}${end}`);
  });
}

// src/utils/formatBibleText.ts
function formatBibleText(input, short = false, language) {
  var _a;
  const reference = parseBibleReference(input, language);
  if (!reference) {
    return input;
  }
  const bookEntry = (_a = getBibleBooks(language)) == null ? void 0 : _a.find((book) => book.id === parseInt(reference.book));
  if (!bookEntry) {
    return input;
  }
  const bookName = short ? bookEntry.shortName : bookEntry.longName;
  const verseRefs = reference.verseRanges.map((range) => {
    const start = parseInt(range.start);
    const end = parseInt(range.end);
    return start === end ? start.toString() : `${start}-${end}`;
  });
  return `${bookName} ${parseInt(reference.chapter)}:${verseRefs.join(",")}`;
}

// src/utils/convertBibleTextToLink.ts
function convertBibleTextToLink(input, language) {
  try {
    const parseResult = parseBibleReference(input, language);
    if (!parseResult) {
      return input;
    }
    return formatJWLibraryLink(parseResult, language);
  } catch (error) {
    return input;
  }
}
function convertBibleTextToMarkdownLink(input, short = false, language) {
  var _a;
  try {
    const parseResult = parseBibleReference(input, language);
    if (!parseResult) {
      return input;
    }
    const reference = parseResult;
    const links = formatJWLibraryLink(reference, language);
    if (!links || Array.isArray(links) && !links.length) {
      return input;
    }
    if (Array.isArray(links)) {
      const bookEntry = (_a = getBibleBooks(language)) == null ? void 0 : _a.find(
        (book) => book.id === parseInt(reference.book)
      );
      if (!bookEntry) {
        return input;
      }
      const bookName = short ? bookEntry.shortName : bookEntry.longName;
      const chapter = parseInt(reference.chapter);
      const verseRanges = reference.verseRanges.map((range) => {
        const start = parseInt(range.start);
        const end = parseInt(range.end);
        return start === end ? start.toString() : `${start}-${end}`;
      });
      return verseRanges.map((range, i) => {
        if (i === 0) {
          return `[${bookName} ${chapter}:${range}](${links[i]})`;
        }
        return `[${range}](${links[i]})`;
      }).join(",");
    }
    const formattedText = formatBibleText(input, short, language);
    return `[${formattedText}](${links})`;
  } catch (error) {
    console.error(error);
    return input;
  }
}

// src/main.ts
var matchingBibleReferenceRegex = /^(?:[1-5]?[A-Za-zäöü]{2,24}\s*\d+:\d+(?:-\d+)?(?:\s*,\s*\d+(?:-\d+)?)*\s*,?\s*)?$/i;
var DEFAULT_SETTINGS = {
  useShortNames: false,
  language: "E"
};
var BibleReferenceSuggester = class extends import_obsidian2.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const commandIndex = subString.lastIndexOf("/b");
    if (commandIndex === -1) return null;
    const afterCommand = subString.slice(commandIndex + 2);
    if (afterCommand.startsWith(" ") || afterCommand.length > 0) {
      return {
        start: {
          ch: commandIndex,
          // Start from the /b
          line: cursor.line
        },
        end: cursor,
        query: afterCommand.trim()
        // Trim to handle the space case
      };
    }
    return null;
  }
  getSuggestions(context) {
    const query = context.query;
    const completeReferenceRegex = /^([a-z0-9äöüß]+?)\s*(\d+)\s*:\s*(\d+)/i;
    if (query.length === 0) {
      return [
        {
          text: query,
          command: "link",
          description: this.t("suggestions.typingEmpty")
        }
      ];
    }
    if (query.match(completeReferenceRegex)) {
      let reference = null;
      try {
        reference = parseBibleReference(query, this.plugin.settings.language);
      } catch (error) {
        return [
          {
            text: query,
            command: "typing",
            description: this.t("suggestions.typing", { text: query })
          }
        ];
      }
      if (!reference) {
        return [];
      }
      const formattedText = formatBibleText(
        query,
        this.plugin.settings.useShortNames,
        this.plugin.settings.language
      );
      const links = formatJWLibraryLink(reference, this.plugin.settings.language);
      const hasMultipleLinks = Array.isArray(links) && links.length > 1;
      const suggestions = [
        {
          text: query,
          command: "link",
          description: hasMultipleLinks ? this.t("suggestions.createLinks", { text: formattedText }) : this.t("suggestions.createLink", { text: formattedText })
        }
      ];
      if (hasMultipleLinks) {
        const verseRanges = reference.verseRanges.map((range) => {
          const start = parseInt(range.start);
          const end = parseInt(range.end);
          return start === end ? start.toString() : `${start}-${end}`;
        });
        verseRanges.forEach((range, i) => {
          suggestions.push({
            text: query,
            command: "open",
            description: this.t("suggestions.createAndOpenVerse", { verse: range }),
            linkIndex: i
          });
        });
      } else {
        suggestions.push({
          text: query,
          command: "open",
          description: this.t("suggestions.createAndOpen", { text: formattedText })
        });
      }
      return suggestions;
    } else {
      return [
        {
          text: query,
          command: "typing",
          description: this.t("suggestions.typing", { text: query })
        }
      ];
    }
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.description);
  }
  selectSuggestion(suggestion) {
    if (!this.context) return;
    const { context } = this;
    const editor = context.editor;
    const convertedLink = convertBibleTextToMarkdownLink(
      suggestion.text,
      this.plugin.settings.useShortNames,
      this.plugin.settings.language
    );
    if (suggestion.command === "typing") {
      return;
    }
    editor.replaceRange(convertedLink, context.start, context.end);
    if (suggestion.command === "open") {
      const url = convertBibleTextToLink(suggestion.text, this.plugin.settings.language);
      if (Array.isArray(url)) {
        window.open(url[suggestion.linkIndex || 0]);
      } else {
        window.open(url);
      }
    }
  }
};
var JWLibraryLinkerPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JWLibraryLinkerSettings(this.app, this));
    this.addCommand({
      id: "replace-links",
      name: this.t("commands.replaceLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "all");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-bible-links",
      name: this.t("commands.replaceBibleLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "bible");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "replace-publication-links",
      name: this.t("commands.replacePublicationLinks"),
      editorCallback: (editor) => {
        const currentContent = editor.getValue();
        const updatedContent = convertLinks(currentContent, "publication");
        if (currentContent !== updatedContent) {
          editor.setValue(updatedContent);
        }
      }
    });
    this.addCommand({
      id: "convert-bible-text",
      name: this.t("commands.convertBibleReference"),
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        if (selection) {
          const convertedLink = convertBibleTextToMarkdownLink(
            selection,
            this.settings.useShortNames,
            this.settings.language
          );
          editor.replaceSelection(convertedLink);
        }
      }
    });
    this.bibleSuggester = new BibleReferenceSuggester(this);
    this.registerEditorSuggest(this.bibleSuggester);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var JWLibraryLinkerSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.t = TranslationService.getInstance().t.bind(TranslationService.getInstance());
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(this.t("settings.language.name")).setDesc(this.t("settings.language.description")).addDropdown(
      (dropdown) => dropdown.addOptions({
        E: "English",
        X: "Deutsch"
      }).setValue(this.plugin.settings.language).onChange(async (value) => {
        this.plugin.settings.language = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(this.t("settings.useShortNames.name")).setDesc(this.t("settings.useShortNames.description")).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useShortNames).onChange(async (value) => {
        this.plugin.settings.useShortNames = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
